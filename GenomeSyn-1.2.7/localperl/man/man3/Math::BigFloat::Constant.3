.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BigFloat::Constant 3"
.TH Math::BigFloat::Constant 3 "2013-06-17" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BigFloat::Constant \- Arbitrary sized constant integers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::BigFloat::Constant;
\&
\&  my $class = \*(AqMath::BigFloat::Constant\*(Aq;
\&
\&  # Constant creation   
\&  $x     = $class\->new($str);   # defaults to 0
\&  $nan   = $class\->bnan();      # create a NotANumber
\&  $zero  = $class\->bzero();     # create a "0"
\&  $one   = $class\->bone();      # create a "1"
\&  $m_one = $class\->bone(\*(Aq\-\*(Aq);   # create a "\-1"
\&
\&
\&  # Testing
\&  $x\->is_zero();                # return wether arg is zero or not
\&  $x\->is_nan();                 # return wether arg is NaN or not
\&  $x\->is_one();                 # return true if arg is +1
\&  $x\->is_one(\*(Aq\-\*(Aq);              # return true if arg is \-1
\&  $x\->is_odd();                 # return true if odd, false for even
\&  $x\->is_even();                # return true if even, false for odd
\&  $x\->is_inf($sign);            # return true if argument is +inf or \-inf, give
\&                                # argument (\*(Aq+\*(Aq or \*(Aq\-\*(Aq) to match only same sign
\&  $x\->is_pos();                 # return true if arg > 0
\&  $x\->is_neg();                 # return true if arg < 0
\&
\&  $x\->bcmp($y);                 # compare numbers (undef,<0,=0,>0)
\&  $x\->bacmp($y);                # compare absolutely (undef,<0,=0,>0)
\&  $x\->sign();                   # return the sign, one of +,\-,+inf,\-inf or NaN
\&
\&  # The following would modify and thus are illegal, e.g. result in a die():
\&
\&  # set 
\&  $x\->bzero();                  # set $x to 0
\&  $x\->bnan();                   # set $x to NaN
\&
\&  $x\->bneg();                   # negation
\&  $x\->babs();                   # absolute value
\&  $x\->bnorm();                  # normalize (no\-op)
\&  $x\->bnot();                   # two\*(Aqs complement (bit wise not)
\&  $x\->binc();                   # increment x by 1
\&  $x\->bdec();                   # decrement x by 1
\&  
\&  $x\->badd($y);                 # addition (add $y to $x)
\&  $x\->bsub($y);                 # subtraction (subtract $y from $x)
\&  $x\->bmul($y);                 # multiplication (multiply $x by $y)
\&  $x\->bdiv($y);                 # divide, set $x to quotient
\&                                # return (quo,rem) or quo if scalar
\&
\&  $x\->bmod($y);                 # modulus (x % y)
\&  $x\->bpow($y);                 # power of arguments (x ** y)
\&  $x\->blsft($y);                # left shift
\&  $x\->brsft($y);                # right shift 
\&  
\&  $x\->band($y);                 # bit\-wise and
\&  $x\->bior($y);                 # bit\-wise inclusive or
\&  $x\->bxor($y);                 # bit\-wise exclusive or
\&  $x\->bnot();                   # bit\-wise not (two\*(Aqs complement)
\&
\&  $x\->bnok($k);                 # n over k
\&  $x\->bfac();                   # factorial $x!
\&  $x\->bexp();                   # Euler\*(Aqs number e ** $x
\&
\&  $x\->bsqrt();                  # calculate square\-root
\&  $x\->broot($y);                # calculate $y\*(Aqs root
\&  $x\->blog($base);              # calculate integer logarithm
\&
\&  $x\->round($A,$P,$round_mode); # round to accuracy or precision using mode $r
\&  $x\->bround($N);               # accuracy: preserve $N digits
\&  $x\->bfround($N);              # round to $Nth digit, no\-op for BigInts
\&
\&  $x\->bfloor();                 # return integer less or equal than $x
\&  $x\->bceil();                  # return integer greater or equal than $x 
\&  $x\->as_int();                 # return a copy of the object as BigInt
\&  $x\->as_number();              # return a copy of the object as BigInt
\&
\&  # The following do not modify their arguments, so they are allowed:
\&  bgcd(@values);                # greatest common divisor
\&  blcm(@values);                # lowest common multiplicator
\&  
\&  $x\->bstr();                   # return normalized string
\&  $x\->bsstr();                  # return string in scientific notation
\&  $x\->length();                 # return number of digits in number
\&  $x\->digit($n);                # extract N\*(Aqth digit from number
\&  
\&  $x\->as_hex();                 # return number as hex string
\&  $x\->as_bin();                 # return number as binary string
\&  $x\->as_oct();                 # return number as octal string
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With this module you can define constant BigFloats on a per-object basis. The
usual \f(CW\*(C`use Math::BigFloat \*(Aq:constant\*(Aq\*(C'\fR will catch \fBall\fR floating point
constants in the script at compile time, but will not let you create constant
values on the fly, nor work for strings and/or floating point constants like
\&\f(CW1e5\fR.
.PP
\&\f(CW\*(C`Math::BigFloat::Constant\*(C'\fR is a true subclass of Math::BigFloat and can
do all the same things \- except modifying any of the objects.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Opposed to compile-time checking via \f(CW\*(C`use constant\*(C'\fR:
.PP
.Vb 2
\&        use Math::BigFloat;
\&        use constant X => Math::BigFloat\->new("12345678");
\&
\&        print X," ",X+2,"\en";           # okay
\&        print "X\en";                    # oups
\&        X += 2;                         # not okay, will die
.Ve
.PP
these provide runtime checks and can be interpolated into strings:
.PP
.Vb 2
\&        use Math::BigFloat::Constant;
\&        $x = Math::BigFloat::Constant\->new("3141592");
\&
\&        print "$x\en";                   # okay
\&        print $x+2,"\en";                # dito
\&        $x += 2;                        # not okay, will die
.Ve
.SH "METHODS"
.IX Header "METHODS"
A \f(CW\*(C`Math::BigFloat::Constant\*(C'\fR object has all the same methods as a
\&\f(CW\*(C`Math::BigFloat\*(C'\fR object.
.SH "BUGS"
.IX Header "BUGS"
None discovered yet.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigFloat, Math::BigInt::Constant.
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) by Tels <http://bloodgate.com/> 2007.
