.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Boulder::Omim 3"
.TH Boulder::Omim 3 "2000-01-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Boulder::Omim \- Fetch Omim data records as parsed Boulder Stones
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # parse a file of Omim records
\&  $om = new Boulder::Omim(\-accessor=>\*(AqFile\*(Aq,
\&                             \-param => \*(Aq/data/omim/omim.txt\*(Aq);
\&  while (my $s = $om\->get) {
\&    print $s\->Identifier;
\&    print $s\->Text;
\&  }
\&
\&  # parse flatfile records yourself
\&  open (OM,"/data/omim/omim.txt");
\&  local $/ = "*RECORD*";
\&  while (<OM>) {
\&     my $s = Boulder::Omim\->parse($_);
\&     # etc.
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Boulder::Omim provides retrieval and parsing services for \s-1OMIM\s0 records
.PP
Boulder::Omim provides retrieval and parsing services for \s-1NCBI\s0
Omim records.  It returns Omim entries in Stone
format, allowing easy access to the various fields and values.
Boulder::Omim is a descendent of Boulder::Stream, and provides a
stream-like interface to a series of Stone objects.
.PP
Access to Omim is provided by one \fIaccessors\fR, which
give access to  local Omim database.  When you
create a new Boulder::Omim stream, you provide the
accessors, along with accessor-specific parameters that control what
entries to fetch.  The accessors is:
.IP "File" 2
.IX Item "File"
This provides access to local Omim entries by reading from a flat file
(typically omim.txt file downloadable from \s-1NCBI\s0's Ftp site).
The stream will return a Stone corresponding to each of the entries in 
the file, starting from the top of the file and working downward.  The 
parameter is the path to the local file.
.PP
It is also possible to parse a single Omim entry from a text string 
stored in a scalar variable, returning a Stone object.
.SS "Boulder::Omim methods"
.IX Subsection "Boulder::Omim methods"
This section lists the public methods that the \fIBoulder::Omim\fR
class makes available.
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 3
\&   # Local fetch via File
\&   $om=new Boulder::Omim(\-accessor  =>  \*(AqFile\*(Aq,
\&                            \-param     =>  \*(Aq/data/omim/omim.txt\*(Aq);
.Ve
.Sp
The \fInew()\fR method creates a new \fIBoulder::Omim\fR stream on the
accessor provided.  The only possible accessors is \fBFile\fR.  
If successful, the method returns the stream
object.  Otherwise it returns undef.
.Sp
\&\fInew()\fR takes the following arguments:
.Sp
.Vb 2
\&        \-accessor       Name of the accessor to use
\&        \-param          Parameters to pass to the accessor
.Ve
.Sp
Specify the accessor to use with the \fB\-accessor\fR argument.  If not
specified, it defaults to \fBFile\fR.
.Sp
\&\fB\-param\fR is an accessor-specific argument.  The possibilities is:
.Sp
For \fBFile\fR, the \fB\-param\fR argument must point to a string-valued
scalar, which will be interpreted as the path to the file to read
Omim entries from.
.IP "\fIget()\fR" 4
.IX Item "get()"
The \fIget()\fR method is inherited from \fIBoulder::Stream\fR, and simply
returns the next parsed Omim Stone, or undef if there is nothing
more to fetch.  It has the same semantics as the parent class,
including the ability to restrict access to certain top-level tags.
.IP "\fIput()\fR" 4
.IX Item "put()"
The \fIput()\fR method is inherited from the parent Boulder::Stream class,
and will write the passed Stone to standard output in Boulder format.
This means that it is currently not possible to write a
Boulder::Omim object back into Omim flatfile form.
.SH "OUTPUT TAGS"
.IX Header "OUTPUT TAGS"
The tags returned by the parsing operation are taken from the names shown in the network
Entrez interface to Omim.
.SS "Top-Level Tags"
.IX Subsection "Top-Level Tags"
These are tags that appear at the top level of the parsed Omim
entry.
.IP "Identifier" 4
.IX Item "Identifier"
The Omim identifier of this entry.  Identifier is a single-value tag.
.Sp
Example:
.Sp
.Vb 1
\&      my $identifierNo = $s\->Identifier;
.Ve
.IP "Title" 4
.IX Item "Title"
The Omim title for this entry.
.Sp
Example:
      my \f(CW$titledef\fR=$s\->Title;
.IP "Text The Text of this Omim entry" 4
.IX Item "Text The Text of this Omim entry"
Example:
      my \f(CW$thetext\fR=$s\->Text;
.ie n .IP "Mini The text condensed version, also called ""Mini"" in Entrez interface" 4
.el .IP "Mini The text condensed version, also called ``Mini'' in Entrez interface" 4
.IX Item "Mini The text condensed version, also called Mini in Entrez interface"
Example:
      my \f(CW$themini\fR=$s\->Mini;
.IP "SeeAlso References to other relevant work." 4
.IX Item "SeeAlso References to other relevant work."
Example:
      my \f(CW$thereviews\fR=$s\->Reviews;
.IP "CreationDate This field contains the name of the person who originated the initial entry in \s-1OMIM\s0 and the date it appeared in the database. The entry may have been subsequently added to, edited, or totally rewritten by others, and their attribution is listed in the \s-1CONTRIBUTORS\s0 field." 4
.IX Item "CreationDate This field contains the name of the person who originated the initial entry in OMIM and the date it appeared in the database. The entry may have been subsequently added to, edited, or totally rewritten by others, and their attribution is listed in the CONTRIBUTORS field."
Example:
      my \f(CW$theCreation\fR=$s\->CreationDate;
.ie n .IP "Contributors This field contains a list, in chronological order, of the persons who have contributed significantly to the content of the \s-1MIM\s0 entry. The name is followed by ""updated"", ""edited"" or ""re-created""." 4
.el .IP "Contributors This field contains a list, in chronological order, of the persons who have contributed significantly to the content of the \s-1MIM\s0 entry. The name is followed by ``updated'', ``edited'' or ``re-created''." 4
.IX Item "Contributors This field contains a list, in chronological order, of the persons who have contributed significantly to the content of the MIM entry. The name is followed by updated, edited or re-created."
Example:
      my \f(CW@theContributors\fR=$s\->Contributors;
.IP "History This field contains the edit history of this record, with an identifier and a date in which minor changes had been performed on the record." 4
.IX Item "History This field contains the edit history of this record, with an identifier and a date in which minor changes had been performed on the record."
Example:
      my \f(CW@theHistory\fR=$s\->History;
.ie n .IP "References The references cited in the entry. Example: my @theReferences=$s\->References;" 4
.el .IP "References The references cited in the entry. Example: my \f(CW@theReferences\fR=$s\->References;" 4
.IX Item "References The references cited in the entry. Example: my @theReferences=$s->References;"
.PD 0
.ie n .IP "ClinicalSynopsis The content of the Clinical Synopsis data field. Example: my @theClinicalSynopsis=$s\->ClinicalSynopsis;" 4
.el .IP "ClinicalSynopsis The content of the Clinical Synopsis data field. Example: my \f(CW@theClinicalSynopsis\fR=$s\->ClinicalSynopsis;" 4
.IX Item "ClinicalSynopsis The content of the Clinical Synopsis data field. Example: my @theClinicalSynopsis=$s->ClinicalSynopsis;"
.ie n .IP "AllelicVariants The Allelic Variants Example: my @theAllelicVariants=$s\->AllelicVariants;" 4
.el .IP "AllelicVariants The Allelic Variants Example: my \f(CW@theAllelicVariants\fR=$s\->AllelicVariants;" 4
.IX Item "AllelicVariants The Allelic Variants Example: my @theAllelicVariants=$s->AllelicVariants;"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Boulder, Boulder::Blast, Boulder::Genbank
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
Luca I.G. Toldo <luca.toldo@merck.de>
.PP
Copyright (c) 1997 Lincoln D. Stein
Copyright (c) 1999 Luca I.G. Toldo
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
