.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GO::AnnotatedGene 3"
.TH GO::AnnotatedGene 3 "2003-11-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME \- \fIwill\fP provide an object to hold info about a gene with GO annotation"
.IX Header "NAME - will provide an object to hold info about a gene with GO annotation"
GO::AnnotatedGene
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The GO::AnnotatedGene package allows creation of objects that contains
the details of a gene as determined from a gene_associations file.
Typically these objects will contain the following information:
.PP
.Vb 7
\&    Column  Cardinality   Contents          
\&    \-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        1       1         Database identifier of the annotated gene
\&        2       1         Standard name of the annotated gene
\&        9       0,1       Name of the product of the annotated gene
\&       10       0,n       Alias(es) of the annotated gene
\&       11       1         type of the annotated gene (one of gene, transcript, protein)
.Ve
.PP
Further details can be found at:
.PP
http://www.geneontology.org/doc/GO.annotation.html#file
.PP
It is expected that AnnotatedGene objects will typically be created by
concrete subclasses of AnnotationProvider
.SH "TODO"
.IX Header "TODO"
A lot....
.SH "Constructor"
.IX Header "Constructor"
.SS "new"
.IX Subsection "new"
This is the constructor for a GO::AnnotatedGene object
.PP
It expects to receive the following named arguments:
.PP
.Vb 3
\&    databaseId    : The databaseId of the annotated gene
\&    standardName  : The standardName of the annotated gene
\&    type          : The type of the annotated gene (one of gene, transcript, protein)
.Ve
.PP
In addition, the following optional arguments may also be provided:
.PP
.Vb 2
\&    productName   : The name of the product of the annotated gene
\&    aliases       : A reference to an array of aliases
.Ve
.PP
Usage:
.PP
.Vb 5
\&    my $annotatedGene = GO::AnnotatedGene\->new(databaseId   => $databaseId,
\&                                               standardName => $standardName,
\&                                               type         => $type,
\&                                               productName  => $productName,
\&                                               aliases      => $aliases);
.Ve
.SH "Public Instance Methods"
.IX Header "Public Instance Methods"
.SS "databaseId"
.IX Subsection "databaseId"
This public instance method returns the databaseId.
.PP
Usage :
.PP
.Vb 1
\&    my $databaseId = $annotatedGene\->databaseId;
.Ve
.SS "standardName"
.IX Subsection "standardName"
This public instance method returns the standardName.
.PP
Usage:
.PP
.Vb 1
\&    my $standardName = $annotatedGene\->standardName;
.Ve
.SS "type"
.IX Subsection "type"
This public instance method returns the type of the annotated gene.
.PP
Usage:
.PP
.Vb 1
\&    my $type = $annotatedGene\->type;
.Ve
.SS "productName"
.IX Subsection "productName"
This public instance method returns the product name of the annotated
gene, if one exists.  Otherwise it returns undef.
.PP
Usage:
.PP
.Vb 1
\&    my $productName = $annotatedGene\->productName;
.Ve
.SS "aliases"
.IX Subsection "aliases"
This public instance method returns an array of aliases for the
annotated gene.  If no aliases exist, then an empty array will be
returned.
.PP
Usage:
.PP
.Vb 1
\&    my @aliases = $annotatedGene\->aliases;
.Ve
.SH "Protected Methods"
.IX Header "Protected Methods"
.SS "_handleMissingArgument"
.IX Subsection "_handleMissingArgument"
This protected method simply provides a simple way for concrete
subclasses to deal with missing arguments from method calls.  It will
die with an appropriate error message.
.PP
Usage:
.PP
.Vb 1
\&    $self\->_handleMissingArgument(argument=>\*(Aqblah\*(Aq);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Gavin Sherlock, sherlock@genome.stanford.edu
