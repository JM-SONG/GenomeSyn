.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Boulder::LocusLink 3"
.TH Boulder::LocusLink 3 "2002-12-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Boulder::LocusLink \- Fetch LocusLink data records as parsed Boulder Stones
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # parse a file of LocusLink records
\&  $ll = new Boulder::LocusLink(\-accessor=>\*(AqFile\*(Aq,
\&                             \-param => \*(Aq/home/data/LocusLink/LL_tmpl\*(Aq);
\&  while (my $s = $ll\->get) {
\&    print $s\->Identifier;
\&    print $s\->Gene;
\&  }
\&
\&  # parse flatfile records yourself
\&  open (LL,"/home/data/LocusLink/LL_tmpl");
\&  local $/ = "*RECORD*";
\&  while (<LL>) {
\&     my $s = Boulder::LocusLink\->parse($_);
\&     # etc.
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Boulder::LocusLink provides retrieval and parsing services for LocusLink records
.PP
Boulder::LocusLink provides retrieval and parsing services for \s-1NCBI\s0
LocusLink records.  It returns Unigene entries in Stone
format, allowing easy access to the various fields and values.
Boulder::LocusLink is a descendent of Boulder::Stream, and provides a
stream-like interface to a series of Stone objects.
.PP
Access to LocusLink is provided by one \fIaccessors\fR, which
give access to  local LocusLink database.  When you
create a new Boulder::LocusLink stream, you provide the
accessors, along with accessor-specific parameters that control what
entries to fetch.  The accessors is:
.IP "File" 2
.IX Item "File"
This provides access to local LocusLink entries by reading from a flat file
(typically Hs.dat file downloadable from \s-1NCBI\s0's Ftp site).
The stream will return a Stone corresponding to each of the entries in 
the file, starting from the top of the file and working downward.  The 
parameter is the path to the local file.
.PP
It is also possible to parse a single LocusLink entry from a text string 
stored in a scalar variable, returning a Stone object.
.SS "Boulder::LocusLink methods"
.IX Subsection "Boulder::LocusLink methods"
This section lists the public methods that the \fIBoulder::LocusLink\fR
class makes available.
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 3
\&   # Local fetch via File
\&   $ug=new Boulder::LocusLink(\-accessor  =>  \*(AqFile\*(Aq,
\&                            \-param     =>  \*(Aq/data/LocusLink/Hs.dat\*(Aq);
.Ve
.Sp
The \fInew()\fR method creates a new \fIBoulder::LocusLink\fR stream on the
accessor provided.  The only possible accessors is \fBFile\fR.  
If successful, the method returns the stream
object.  Otherwise it returns undef.
.Sp
\&\fInew()\fR takes the following arguments:
.Sp
.Vb 2
\&        \-accessor       Name of the accessor to use
\&        \-param          Parameters to pass to the accessor
.Ve
.Sp
Specify the accessor to use with the \fB\-accessor\fR argument.  If not
specified, it defaults to \fBFile\fR.
.Sp
\&\fB\-param\fR is an accessor-specific argument.  The possibilities is:
.Sp
For \fBFile\fR, the \fB\-param\fR argument must point to a string-valued
scalar, which will be interpreted as the path to the file to read
LocusLink entries from.
.IP "\fIget()\fR" 4
.IX Item "get()"
The \fIget()\fR method is inherited from \fIBoulder::Stream\fR, and simply
returns the next parsed LocusLink Stone, or undef if there is nothing
more to fetch.  It has the same semantics as the parent class,
including the ability to restrict access to certain top-level tags.
.IP "\fIput()\fR" 4
.IX Item "put()"
The \fIput()\fR method is inherited from the parent Boulder::Stream class,
and will write the passed Stone to standard output in Boulder format.
This means that it is currently not possible to write a
Boulder::LocusLink object back into LocusLink flatfile form.
.SH "OUTPUT TAGS"
.IX Header "OUTPUT TAGS"
The tags returned by the parsing operation are taken from the names shown in the Flat file
Hs.dat since no better description of them is provided yet by the database source producer.
.SS "Top-Level Tags"
.IX Subsection "Top-Level Tags"
These are tags that appear at the top level of the parsed LocusLink
entry.
.IP "Identifier" 4
.IX Item "Identifier"
The LocusLink identifier of this entry.  Identifier is a single-value tag.
.Sp
Example:
.Sp
.Vb 1
\&      my $identifierNo = $s\->Identifier;
.Ve
.IP "Current_locusid" 4
.IX Item "Current_locusid"
If a locus has been merged with another, the Current_locusid contains the
previous \s-1LOCUSID\s0 line (A bit confusing, shall be called \*(L"previous_locusid\*(R",
but this is defined in \s-1NCBI\s0 \s-1README\s0 File ... ).
.Sp
Example:
      my \f(CW$prevlocusid\fR=$s\->Current_locusid;
.IP "Organism Source species ased on \s-1NCBI\s0's Taxonomy" 4
.IX Item "Organism Source species ased on NCBI's Taxonomy"
Example:
      my \f(CW$theorganism\fR=$s\->Organism;
.ie n .IP "Status Type of reference sequence record. If ""\s-1PROVISIONAL\s0"" then means that is generated automatically from existing Genbank record and information stored in the LocusLink database, no curation. If ""\s-1REVIEWED\s0"" than it means that is generated from the most representative complete GenBank sequence or merge of GenBank sequenes and from information stored in the LocusLink database" 4
.el .IP "Status Type of reference sequence record. If ``\s-1PROVISIONAL\s0'' then means that is generated automatically from existing Genbank record and information stored in the LocusLink database, no curation. If ``\s-1REVIEWED\s0'' than it means that is generated from the most representative complete GenBank sequence or merge of GenBank sequenes and from information stored in the LocusLink database" 4
.IX Item "Status Type of reference sequence record. If PROVISIONAL then means that is generated automatically from existing Genbank record and information stored in the LocusLink database, no curation. If REVIEWED than it means that is generated from the most representative complete GenBank sequence or merge of GenBank sequenes and from information stored in the LocusLink database"
Example:
      my \f(CW$thestatus\fR=$s\->Status;
.IP "LocAss Here comes a complex record ... made up of \s-1LOCUS_STRING\s0, \s-1NM\s0         The value in the \s-1LOCUS\s0 field of the RefSeq record , \s-1NP\s0         The RefSeq accession number for an mRNA record, \s-1PRODUCT\s0    The name of the produc tof this transcript, \s-1TRANSVAR\s0   a variant-specific description, \s-1ASSEMBLY\s0   The Genbank accession used to assemble the refseq record" 4
.IX Item "LocAss Here comes a complex record ... made up of LOCUS_STRING, NM         The value in the LOCUS field of the RefSeq record , NP         The RefSeq accession number for an mRNA record, PRODUCT    The name of the produc tof this transcript, TRANSVAR   a variant-specific description, ASSEMBLY   The Genbank accession used to assemble the refseq record"
Example:
      my \f(CW$theprod\fR=$s\->LocAss\->Product;
.ie n .IP "AccProt Here comes a complex record ... made up of \s-1ACCNUM\s0	     Nucleotide sequence accessio number \s-1TYPE\s0         e=EST, m=mRNA, g=Genomic \s-1PROT\s0         set of \s-1PID\s0 values for the coding region or regions annotated on the nucleotide record. The first value is the \s-1PID\s0 (an integer or null), then either \s-1MMDB\s0 or na, separated from the \s-1PID\s0 by a |. If \s-1MMDB\s0 is present, it indicates there are structur edata available for a protein related to the protein referenced by the \s-1PID\s0 Example: my $theprot=$s\->AccProt\->Prot;" 4
.el .IP "AccProt Here comes a complex record ... made up of \s-1ACCNUM\s0	     Nucleotide sequence accessio number \s-1TYPE\s0         e=EST, m=mRNA, g=Genomic \s-1PROT\s0         set of \s-1PID\s0 values for the coding region or regions annotated on the nucleotide record. The first value is the \s-1PID\s0 (an integer or null), then either \s-1MMDB\s0 or na, separated from the \s-1PID\s0 by a |. If \s-1MMDB\s0 is present, it indicates there are structur edata available for a protein related to the protein referenced by the \s-1PID\s0 Example: my \f(CW$theprot\fR=$s\->AccProt\->Prot;" 4
.IX Item "AccProt Here comes a complex record ... made up of ACCNUM	     Nucleotide sequence accessio number TYPE         e=EST, m=mRNA, g=Genomic PROT         set of PID values for the coding region or regions annotated on the nucleotide record. The first value is the PID (an integer or null), then either MMDB or na, separated from the PID by a |. If MMDB is present, it indicates there are structur edata available for a protein related to the protein referenced by the PID Example: my $theprot=$s->AccProt->Prot;"
.PD 0
.IP "\s-1OFFICIAL_SYMBOL\s0 The symbol used for gene reports, validated by the appropriate nomenclature committee" 4
.IX Item "OFFICIAL_SYMBOL The symbol used for gene reports, validated by the appropriate nomenclature committee"
.IP "\s-1PREFERRED_SYMBOL\s0 Interim symbol used for display" 4
.IX Item "PREFERRED_SYMBOL Interim symbol used for display"
.IP "\s-1OFFICIAL_GENE_NAME\s0 The gene description used for gene reports validate by the appropriate nomenclatur eommittee. If the symbol is official, the gene name will be official. No records will have both official and interim nomenclature." 4
.IX Item "OFFICIAL_GENE_NAME The gene description used for gene reports validate by the appropriate nomenclatur eommittee. If the symbol is official, the gene name will be official. No records will have both official and interim nomenclature."
.IP "\s-1PREFERRED_GENE_NAME\s0 Interim used for display" 4
.IX Item "PREFERRED_GENE_NAME Interim used for display"
.IP "\s-1PREFERRED_PRODUCT\s0 The name of the product used in the RefSeq record" 4
.IX Item "PREFERRED_PRODUCT The name of the product used in the RefSeq record"
.IP "\s-1ALIAS_SYMBOL\s0 Other symbols associated with this gene" 4
.IX Item "ALIAS_SYMBOL Other symbols associated with this gene"
.IP "\s-1ALIAS_PROT\s0 Other protein names associated with this gene" 4
.IX Item "ALIAS_PROT Other protein names associated with this gene"
.IP "PhenoTable A complex record made up of Phenotype Phenotype_ID" 4
.IX Item "PhenoTable A complex record made up of Phenotype Phenotype_ID"
.IP "SUmmary" 4
.IX Item "SUmmary"
.IP "Unigene" 4
.IX Item "Unigene"
.IP "Omim" 4
.IX Item "Omim"
.IP "Chr" 4
.IX Item "Chr"
.IP "Map" 4
.IX Item "Map"
.IP "\s-1STS\s0" 4
.IX Item "STS"
.IP "\s-1ECNUM\s0" 4
.IX Item "ECNUM"
.IP "ButTable \s-1BUTTON\s0 \s-1LINK\s0" 4
.IX Item "ButTable BUTTON LINK"
.IP "DBTable \s-1DB_DESCR\s0 \s-1DB_LINK\s0" 4
.IX Item "DBTable DB_DESCR DB_LINK"
.IP "\s-1PMID\s0 a subset of publications associated with this locus with the link being the PubMed unique identifier comma separated" 4
.IX Item "PMID a subset of publications associated with this locus with the link being the PubMed unique identifier comma separated"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Boulder, Boulder::Blast, Boulder::Genbank
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
Luca I.G. Toldo <luca.toldo@merck.de>
.PP
Copyright (c) 1997 Lincoln D. Stein
Copyright (c) 1999 Luca I.G. Toldo
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
