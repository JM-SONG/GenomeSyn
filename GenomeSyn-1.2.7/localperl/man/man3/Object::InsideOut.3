.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Object::InsideOut 3"
.TH Object::InsideOut 3 "2013-10-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Object::InsideOut \- Comprehensive inside\-out object support module
.SH "VERSION"
.IX Header "VERSION"
This document describes Object::InsideOut version 3.98
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     # Numeric field
\&     #   With combined get+set accessor
\&     my @data
\&            :Field
\&            :Type(numeric)
\&            :Accessor(data);
\&
\&     # Takes \*(AqINPUT\*(Aq (or \*(Aqinput\*(Aq, etc.) as a mandatory parameter to \->new()
\&     my %init_args :InitArgs = (
\&         \*(AqINPUT\*(Aq => {
\&             \*(AqRegex\*(Aq     => qr/^input$/i,
\&             \*(AqMandatory\*(Aq => 1,
\&             \*(AqType\*(Aq      => \*(Aqnumeric\*(Aq,
\&         },
\&     );
\&
\&     # Handle class\-specific args as part of \->new()
\&     sub init :Init
\&     {
\&         my ($self, $args) = @_;
\&
\&         # Put \*(Aqinput\*(Aq parameter into \*(Aqdata\*(Aq field
\&         $self\->set(\e@data, $args\->{\*(AqINPUT\*(Aq});
\&     }
\& }
\&
\& package My::Class::Sub; {
\&     use Object::InsideOut qw(My::Class);
\&
\&     # List field
\&     #   With standard \*(Aqget_X\*(Aq and \*(Aqset_X\*(Aq accessors
\&     #   Takes \*(AqINFO\*(Aq as an optional list parameter to \->new()
\&     #     Value automatically added to @info array
\&     #     Defaults to [ \*(Aqempty\*(Aq ]
\&     my @info
\&            :Field
\&            :Type(list)
\&            :Standard(info)
\&            :Arg(\*(AqName\*(Aq => \*(AqINFO\*(Aq, \*(AqDefault\*(Aq => \*(Aqempty\*(Aq);
\& }
\&
\& package Foo; {
\&     use Object::InsideOut;
\&
\&     # Field containing My::Class objects
\&     #   With combined accessor
\&     #   Plus automatic parameter processing on object creation
\&     my @foo
\&            :Field
\&            :Type(My::Class)
\&            :All(foo);
\& }
\&
\& package main;
\&
\& my $obj = My::Class::Sub\->new(\*(AqInput\*(Aq => 69);
\& my $info = $obj\->get_info();               # [ \*(Aqempty\*(Aq ]
\& my $data = $obj\->data();                   # 69
\& $obj\->data(42);
\& $data = $obj\->data();                      # 42
\&
\& $obj = My::Class::Sub\->new(\*(AqINFO\*(Aq => \*(Aqhelp\*(Aq, \*(AqINPUT\*(Aq => 86);
\& $data = $obj\->data();                      # 86
\& $info = $obj\->get_info();                  # [ \*(Aqhelp\*(Aq ]
\& $obj\->set_info(qw(foo bar baz));
\& $info = $obj\->get_info();                  # [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq ]
\&
\& my $foo_obj = Foo\->new(\*(Aqfoo\*(Aq => $obj);
\& $foo_obj\->foo()\->data();                   # 86
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides comprehensive support for implementing classes using the
inside-out object model.
.PP
Object::InsideOut implements inside-out objects as anonymous scalar references
that are blessed into a class with the scalar containing the \s-1ID\s0 for the object
(usually a sequence number).  For Perl 5.8.3 and later, the scalar reference
is set as \fBread-only\fR to prevent \fIaccidental\fR modifications to the \s-1ID\s0.
Object data (i.e., fields) are stored within the class's package in either
arrays indexed by the object's \s-1ID\s0, or hashes keyed to the object's \s-1ID\s0.
.PP
The virtues of the inside-out object model over the \fIblessed hash\fR object
model have been extolled in detail elsewhere.  See the informational links
under \*(L"\s-1SEE\s0 \s-1ALSO\s0\*(R".  Briefly, inside-out objects offer the following
advantages over \fIblessed hash\fR objects:
.IP "\(bu" 4
Encapsulation
.Sp
Object data is enclosed within the class's code and is accessible only through
the class-defined interface.
.IP "\(bu" 4
Field Name Collision Avoidance
.Sp
Inheritance using \fIblessed hash\fR classes can lead to conflicts if any classes
use the same name for a field (i.e., hash key).  Inside-out objects are immune
to this problem because object data is stored inside each class's package, and
not in the object itself.
.IP "\(bu" 4
Compile-time Name Checking
.Sp
A common error with \fIblessed hash\fR classes is the misspelling of field names:
.Sp
.Vb 1
\& $obj\->{\*(Aqcoment\*(Aq} = \*(AqSay what?\*(Aq;   # Should be \*(Aqcomment\*(Aq not \*(Aqcoment\*(Aq
.Ve
.Sp
As there is no compile-time checking on hash keys, such errors do not usually
manifest themselves until runtime.
.Sp
With inside-out objects, \fItext\fR hash keys are not used for accessing field
data.  Field names and the data index (i.e., $$self) are checked by the Perl
compiler such that any typos are easily caught using \f(CW\*(C`perl\ \-c\*(C'\fR.
.Sp
.Vb 3
\& $coment[$$self] = $value;    # Causes a compile\-time error
\&    # or with hash\-based fields
\& $comment{$$self} = $value;   # Also causes a compile\-time error
.Ve
.PP
Object::InsideOut offers all the capabilities of other inside-out object
modules with the following additional key advantages:
.IP "\(bu" 4
Speed
.Sp
When using arrays to store object data, Object::InsideOut objects are as
much as 40% faster than \fIblessed hash\fR objects for fetching and setting data,
and even with hashes they are still several percent faster than \fIblessed
hash\fR objects.
.IP "\(bu" 4
Threads
.Sp
Object::InsideOut is thread safe, and thoroughly supports sharing objects
between threads using threads::shared.
.IP "\(bu" 4
Flexibility
.Sp
Allows control over object \s-1ID\s0 specification, accessor naming, parameter name
matching, and much more.
.IP "\(bu" 4
Runtime Support
.Sp
Supports classes that may be loaded at runtime (i.e., using
\&\f(CW\*(C`eval\ {\ require\ ...;\ };\*(C'\fR).  This makes it usable from within mod_perl,
as well.  Also supports additions to class hierarchies, and dynamic creation
of object fields during runtime.
.IP "\(bu" 4
Exception Objects
.Sp
Object::InsideOut uses Exception::Class for handling errors in an
OO-compatible manner.
.IP "\(bu" 4
Object Serialization
.Sp
Object::InsideOut has built-in support for object dumping and reloading that
can be accomplished in either an automated fashion or through the use of
class-supplied subroutines.  Serialization using Storable is also
supported.
.IP "\(bu" 4
Foreign Class Inheritance
.Sp
Object::InsideOut allows classes to inherit from foreign (i.e.,
non\-Object::InsideOut) classes, thus allowing you to sub-class other Perl
class, and access their methods from your own objects.
.IP "\(bu" 4
Introspection
.Sp
Obtain constructor parameters and method metadata for Object::InsideOut
classes.
.SH "CLASSES"
.IX Header "CLASSES"
To use this module, each of your classes will start with
\&\f(CW\*(C`use\ Object::InsideOut;\*(C'\fR:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut;
\&     ...
\& }
.Ve
.PP
Sub-classes (child classes) inherit from base classes (parent classes) by
telling Object::InsideOut what the parent class is:
.PP
.Vb 4
\& package My::Sub; {
\&     use Object::InsideOut qw(My::Parent);
\&     ...
\& }
.Ve
.PP
Multiple inheritance is also supported:
.PP
.Vb 4
\& package My::Project; {
\&     use Object::InsideOut qw(My::Class Another::Class);
\&     ...
\& }
.Ve
.PP
Object::InsideOut acts as a replacement for the \f(CW\*(C`base\*(C'\fR pragma:  It loads the
parent module(s), calls their \f(CW\*(C`\->import()\*(C'\fR methods, and sets up the
sub-class's \f(CW@ISA\fR array.  Therefore, you should not \f(CW\*(C`use\ base\ ...\*(C'\fR yourself,
nor try to set up \f(CW@ISA\fR arrays.  Further, you should not use a class's
\&\f(CW@ISA\fR array to determine a class's hierarchy:  See \*(L"\s-1INTROSPECTION\s0\*(R" for
details on how to do this.
.PP
If a parent class takes parameters (e.g., symbols to be exported via
Exporter), enclose them in an array ref
(mandatory) following the name of the parent class:
.PP
.Vb 5
\& package My::Project; {
\&     use Object::InsideOut \*(AqMy::Class\*(Aq      => [ \*(Aqparam1\*(Aq, \*(Aqparam2\*(Aq ],
\&                           \*(AqAnother::Class\*(Aq => [ \*(Aqparam\*(Aq ];
\&     ...
\& }
.Ve
.SH "OBJECTS"
.IX Header "OBJECTS"
.SS "Object Creation"
.IX Subsection "Object Creation"
Objects are created using the \f(CW\*(C`\->new()\*(C'\fR method which is exported by
Object::InsideOut to each class, and is invoked in the following manner:
.PP
.Vb 1
\& my $obj = My::Class\->new();
.Ve
.PP
Object::InsideOut then handles all the messy details of initializing the
object in each of the classes in the invoking class's hierarchy.  As such,
classes do not (normally) implement their own \f(CW\*(C`\->new()\*(C'\fR method.
.PP
Usually, object fields are initially populated with data as part of the
object creation process by passing parameters to the \f(CW\*(C`\->new()\*(C'\fR method.
Parameters are passed in as combinations of \f(CW\*(C`key\ =>\ value\*(C'\fR pairs
and/or hash refs:
.PP
.Vb 10
\& my $obj = My::Class\->new(\*(Aqparam1\*(Aq => \*(Aqvalue1\*(Aq);
\&     # or
\& my $obj = My::Class\->new({\*(Aqparam1\*(Aq => \*(Aqvalue1\*(Aq});
\&     # or even
\& my $obj = My::Class\->new(
\&     \*(Aqparam_X\*(Aq => \*(Aqvalue_X\*(Aq,
\&     \*(Aqparam_Y\*(Aq => \*(Aqvalue_Y\*(Aq,
\&     {
\&         \*(Aqparam_A\*(Aq => \*(Aqvalue_A\*(Aq,
\&         \*(Aqparam_B\*(Aq => \*(Aqvalue_B\*(Aq,
\&     },
\&     {
\&         \*(Aqparam_Q\*(Aq => \*(Aqvalue_Q\*(Aq,
\&     },
\& );
.Ve
.PP
Additionally, parameters can be segregated in hash refs for specific classes:
.PP
.Vb 5
\& my $obj = My::Class\->new(
\&     \*(Aqfoo\*(Aq => \*(Aqbar\*(Aq,
\&     \*(AqMy::Class\*(Aq      => { \*(Aqparam\*(Aq => \*(Aqvalue\*(Aq },
\&     \*(AqParent::Class\*(Aq  => { \*(Aqdata\*(Aq  => \*(Aqinfo\*(Aq  },
\& );
.Ve
.PP
The initialization methods for both classes in the above will get
\&\f(CW\*(Aqfoo\*(Aq\ =>\ \*(Aqbar\*(Aq\fR, \f(CW\*(C`My::Class\*(C'\fR will also get
\&\f(CW\*(Aqparam\*(Aq\ =>\ \*(Aqvalue\*(Aq\fR, and \f(CW\*(C`Parent::Class\*(C'\fR will also get
\&\f(CW\*(Aqdata\*(Aq\ =>\ \*(Aqinfo\*(Aq\fR.  In this scheme, class-specific parameters will
override general parameters specified at a higher level:
.PP
.Vb 4
\& my $obj = My::Class\->new(
\&     \*(Aqdefault\*(Aq => \*(Aqbar\*(Aq,
\&     \*(AqParent::Class\*(Aq  => { \*(Aqdefault\*(Aq => \*(Aqbaz\*(Aq },
\& );
.Ve
.PP
\&\f(CW\*(C`My::Class\*(C'\fR will get \f(CW\*(Aqdefault\*(Aq\ =>\ \*(Aqbar\*(Aq\fR, and \f(CW\*(C`Parent::Class\*(C'\fR will
get \f(CW\*(Aqdefault\*(Aq\ =>\ \*(Aqbaz\*(Aq\fR.
.PP
Calling \f(CW\*(C`\->new()\*(C'\fR on an object works, too, and operates the same as
calling \f(CW\*(C`\->new()\*(C'\fR for the class of the object (i.e., \f(CW\*(C`$obj\->new()\*(C'\fR
is the same as \f(CW\*(C`ref($obj)\->new()\*(C'\fR).
.PP
How the parameters passed to the \f(CW\*(C`\->new()\*(C'\fR method are used to
initialize the object is discussed later under \*(L"\s-1OBJECT\s0 \s-1INITIALIZATION\s0\*(R".
.PP
\&\s-1NOTE:\s0 You cannot create objects from Object::InsideOut itself:
.PP
.Vb 2
\& # This is an error
\& # my $obj = Object::InsideOut\->new();
.Ve
.PP
In this way, Object::InsideOut is not an object class, but functions more like
a pragma.
.SS "Object IDs"
.IX Subsection "Object IDs"
As stated earlier, this module implements inside-out objects as anonymous,
read-only scalar references that are blessed into a class with the scalar
containing the \s-1ID\s0 for the object.
.PP
Within methods, the object is passed in as the first argument:
.PP
.Vb 5
\& sub my_method
\& {
\&     my $self = shift;
\&     ...
\& }
.Ve
.PP
The object's \s-1ID\s0 is then obtained by dereferencing the object:  \f(CW$$self\fR.
Normally, this is only needed when accessing the object's field data:
.PP
.Vb 1
\& my @my_field :Field;
\&
\& sub my_method
\& {
\&     my $self = shift;
\&     ...
\&     my $data = $my_field[$$self];
\&     ...
\& }
.Ve
.PP
At all other times, and especially in application code, the object should be
treated as an \fIopaque\fR entity.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Much of the power of Object::InsideOut comes from the use of \fIattributes\fR:
\&\fITags\fR on variables and subroutines that the attributes module sends to
Object::InsideOut at compile time.  Object::InsideOut then makes use of the
information in these tags to handle such operations as object construction,
automatic accessor generation, and so on.
.PP
(Note:  The use of attributes is not the same thing as
source filtering.)
.PP
An attribute consists of an identifier preceded by a colon, and optionally
followed by a set of parameters in parentheses.  For example, the attributes
on the following array declare it as an object field, and specify the
generation of an accessor method for that field:
.PP
.Vb 1
\& my @level :Field :Accessor(level);
.Ve
.PP
When multiple attributes are assigned to a single entity, they may all appear
on the same line (as shown above), or on separate lines:
.PP
.Vb 3
\& my @level
\&     :Field
\&     :Accessor(level);
.Ve
.PP
However, due to limitations in the Perl parser, the entirety of any one
attribute must be on a single line:
.PP
.Vb 5
\& # This doesn\*(Aqt work
\& # my @level
\& #     :Field
\& #     :Accessor(\*(AqName\*(Aq   => \*(Aqlevel\*(Aq,
\& #               \*(AqReturn\*(Aq => \*(AqOld\*(Aq);
\&
\& # Each attribute must be all on one line
\& my @level
\&     :Field
\&     :Accessor(\*(AqName\*(Aq => \*(Aqlevel\*(Aq, \*(AqReturn\*(Aq => \*(AqOld\*(Aq);
.Ve
.PP
For Object::InsideOut's purposes, the case of an attribute's name does not
matter:
.PP
.Vb 3
\& my @data :Field;
\&    # or
\& my @data :FIELD;
.Ve
.PP
However, by convention (as denoted in the attributes module), an
attribute's name should not be all lowercase.
.SH "FIELDS"
.IX Header "FIELDS"
.SS "Field Declarations"
.IX Subsection "Field Declarations"
Object data fields consist of arrays within a class's package into which data
are stored using the object's \s-1ID\s0 as the array index.  An array is declared as
being an object field by following its declaration with the \f(CW\*(C`:Field\*(C'\fR
attribute:
.PP
.Vb 1
\& my @info :Field;
.Ve
.PP
Object data fields may also be hashes:
.PP
.Vb 1
\& my %data :Field;
.Ve
.PP
However, as array access is as much as 40% faster than hash access, you should
stick to using arrays.  See \*(L"\s-1HASH\s0 \s-1ONLY\s0 \s-1CLASSES\s0\*(R" for more information on
when hashes may be required.
.SS "Getting Data"
.IX Subsection "Getting Data"
In class code, data can be fetched directly from an object's field array
(hash) using the object's \s-1ID:\s0
.PP
.Vb 3
\& $data = $field[$$self];
\&     # or
\& $data = $field{$$self};
.Ve
.SS "Setting Data"
.IX Subsection "Setting Data"
Analogous to the above, data can be put directly into an object's field array
(hash) using the object's \s-1ID:\s0
.PP
.Vb 3
\& $field[$$self] = $data;
\&     # or
\& $field{$$self} = $data;
.Ve
.PP
However, in threaded applications that use data sharing (i.e., use
\&\f(CW\*(C`threads::shared\*(C'\fR), the above will not work when the object is shared between
threads and the data being stored is either an array, hash or scalar reference
(this includes other objects).  This is because the \f(CW$data\fR must first be
converted into shared data before it can be put into the field.
.PP
Therefore, Object::InsideOut automatically exports a method called
\&\f(CW\*(C`\->set()\*(C'\fR to each class.  This method should be used in class code to put
data into object fields whenever there is the possibility that
the class code may be used in an application that uses threads::shared
(i.e., to make your class code \fBthread-safe\fR).  The \f(CW\*(C`\->set()\*(C'\fR method
handles all details of converting the data to a shared form, and storing it in
the field.
.PP
The \f(CW\*(C`\->set()\*(C'\fR method, requires two arguments:  A reference to the object
field array/hash, and the data (as a scalar) to be put in it:
.PP
.Vb 1
\& my @my_field :Field;
\&
\& sub store_data
\& {
\&     my ($self, $data) = @_;
\&     ...
\&     $self\->set(\e@my_field, $data);
\& }
.Ve
.PP
To be clear, the \f(CW\*(C`\->set()\*(C'\fR method is used inside class code; not
application code.  Use it inside any object methods that set data in object
field arrays/hashes.
.PP
In the event of a method naming conflict, the \f(CW\*(C`\->set()\*(C'\fR method can be
called using its fully-qualified name:
.PP
.Vb 1
\& $self\->Object::InsideOut::set(\e@field, $data);
.Ve
.SH "OBJECT INITIALIZATION"
.IX Header "OBJECT INITIALIZATION"
As stated in \*(L"Object Creation\*(R", object fields are initially populated with
data as part of the object creation process by passing \f(CW\*(C`key\ =>\ value\*(C'\fR
parameters to the \f(CW\*(C`\->new()\*(C'\fR method.  These parameters can be processed
automatically into object fields, or can be passed to a class-specific object
initialization subroutine.
.SS "Field-Specific Parameters"
.IX Subsection "Field-Specific Parameters"
When an object creation parameter corresponds directly to an object field, you
can specify for Object::InsideOut to automatically place the parameter into
the field by adding the \f(CW\*(C`:Arg\*(C'\fR attribute to the field declaration:
.PP
.Vb 1
\& my @foo :Field :Arg(foo);
.Ve
.PP
For the above, the following would result in \f(CW$val\fR being placed in
\&\f(CW\*(C`My::Class\*(C'\fR's \f(CW@foo\fR field during object creation:
.PP
.Vb 1
\& my $obj = My::Class\->new(\*(Aqfoo\*(Aq => $val);
.Ve
.SS "Object Initialization Subroutines"
.IX Subsection "Object Initialization Subroutines"
Many times, object initialization parameters do not correspond directly to
object fields, or they may require special handling.  For these, parameter
processing is accomplished through a combination of an \f(CW\*(C`:InitArgs\*(C'\fR
labeled hash, and an \f(CW\*(C`:Init\*(C'\fR labeled subroutine.
.PP
The \f(CW\*(C`:InitArgs\*(C'\fR labeled hash specifies the parameters to be extracted from
the argument list supplied to the \f(CW\*(C`\->new()\*(C'\fR method.  Those parameters
(and only those parameters) which match the keys in the \f(CW\*(C`:InitArgs\*(C'\fR hash are
then packaged together into a single hash ref.  The newly created object and
this parameter hash ref are then sent to the \f(CW\*(C`:Init\*(C'\fR subroutine for
processing.
.PP
Here is an example of a class with an \fIautomatically handled\fR field and an
\&\fI:Init handled\fR field:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     # Automatically handled field
\&     my @my_data  :Field  :Acc(data)  :Arg(MY_DATA);
\&
\&     # \*(Aq:Init\*(Aq handled field
\&     my @my_field :Field;
\&
\&     my %init_args :InitArgs = (
\&         \*(AqMY_PARAM\*(Aq => \*(Aq\*(Aq,
\&     );
\&
\&     sub _init :Init
\&     {
\&         my ($self, $args) = @_;
\&
\&         if (exists($args\->{\*(AqMY_PARAM\*(Aq})) {
\&             $self\->set(\e@my_field, $args\->{\*(AqMY_PARAM\*(Aq});
\&         }
\&     }
\&
\&     ...
\& }
.Ve
.PP
An object for this class would be created as follows:
.PP
.Vb 2
\& my $obj = My::Class\->new(\*(AqMY_DATA\*(Aq  => $dat,
\&                          \*(AqMY_PARAM\*(Aq => $parm);
.Ve
.PP
This results in, first of all, \f(CW$dat\fR being placed in the object's
\&\f(CW@my_data\fR field because the \f(CW\*(C`MY_DATA\*(C'\fR key is specified in the \f(CW\*(C`:Arg\*(C'\fR
attribute for that field.
.PP
Then, \f(CW\*(C`_init\*(C'\fR is invoked with arguments consisting of the object (i.e.,
\&\f(CW$self\fR) and a hash ref consisting only of \f(CW\*(C`{\ \*(AqMY_PARAM\*(Aq\ =>\ $param\ }\*(C'\fR
because the key \f(CW\*(C`MY_PARAM\*(C'\fR is specified in the \f(CW\*(C`:InitArgs\*(C'\fR hash.
\&\f(CW\*(C`_init\*(C'\fR checks that the parameter \f(CW\*(C`MY_PARAM\*(C'\fR exists in the hash ref, and
then (since it does exist) adds \f(CW$parm\fR to the object's \f(CW@my_field\fR field.
.IP "Setting Data" 4
.IX Item "Setting Data"
Data processed by the \f(CW\*(C`:Init\*(C'\fR subroutine may be placed directly into the
class's field arrays (hashes) using the object's \s-1ID\s0 (i.e., \f(CW$$self\fR):
.Sp
.Vb 1
\& $my_field[$$self] = $args\->{\*(AqMY_PARAM\*(Aq};
.Ve
.Sp
However, as shown in the example above, it is strongly recommended that you
use the \->\fIset()\fR method:
.Sp
.Vb 1
\& $self\->set(\e@my_field, $args\->{\*(AqMY_PARAM\*(Aq});
.Ve
.Sp
which handles converting the data to a shared format when needed for
applications using threads::shared.
.IP "All Parameters" 4
.IX Item "All Parameters"
The \f(CW\*(C`:InitArgs\*(C'\fR hash and the \f(CW\*(C`:Arg\*(C'\fR attribute on fields act as filters that
constrain which initialization parameters are and are not sent to the \f(CW\*(C`:Init\*(C'\fR
subroutine.  If, however, a class does not have an \f(CW\*(C`:InitArgs\*(C'\fR hash \fBand\fR
does not use the \f(CW\*(C`:Arg\*(C'\fR attribute on any of its fields, then its \f(CW\*(C`:Init\*(C'\fR
subroutine (if it exists, of course) will get all the initialization
parameters supplied to the \f(CW\*(C`\->new()\*(C'\fR method.
.SS "Mandatory Parameters"
.IX Subsection "Mandatory Parameters"
Field-specific parameters may be declared mandatory as follows:
.PP
.Vb 2
\& my @data :Field
\&          :Arg(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqMandatory\*(Aq => 1);
.Ve
.PP
If a mandatory parameter is missing from the argument list to \f(CW\*(C`\->new()\*(C'\fR,
an error is generated.
.PP
For \f(CW\*(C`:Init\*(C'\fR handled parameters, use:
.PP
.Vb 5
\& my %init_args :InitArgs = (
\&     \*(Aqdata\*(Aq => {
\&         \*(AqMandatory\*(Aq => 1,
\&     },
\& );
.Ve
.PP
\&\f(CW\*(C`Mandatory\*(C'\fR may be abbreviated to \f(CW\*(C`Mand\*(C'\fR, and \f(CW\*(C`Required\*(C'\fR or \f(CW\*(C`Req\*(C'\fR are
synonymous.
.SS "Default Values"
.IX Subsection "Default Values"
For optional parameters, defaults can be specified for field-specific
parameters using either of these syntaxes:
.PP
.Vb 2
\& my @data :Field
\&          :Arg(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqDefault\*(Aq => \*(Aqfoo\*(Aq);
\&
\& my @info :Field  :Arg(info)  :Default(\*(Aqbar\*(Aq);
.Ve
.PP
If an optional parameter with a specified default is missing from the argument
list to \f(CW\*(C`\->new()\*(C'\fR, then the default is assigned to the field when the
object is created (before the \f(CW\*(C`:Init\*(C'\fR subroutine, if any, is called).
.PP
The format for \f(CW\*(C`:Init\*(C'\fR handled parameters is:
.PP
.Vb 5
\& my %init_args :InitArgs = (
\&     \*(Aqdata\*(Aq => {
\&         \*(AqDefault\*(Aq => \*(Aqfoo\*(Aq,
\&     },
\& );
.Ve
.PP
In this case, if the parameter is missing from the argument list to
\&\f(CW\*(C`\->new()\*(C'\fR, then the parameter key is paired with the default value and
added to the \f(CW\*(C`:Init\*(C'\fR argument hash ref (e.g., \f(CW\*(C`{\ \*(Aqdata\*(Aq\ =>\ \*(Aqfoo\*(Aq\ }\*(C'\fR).
.PP
Fields can also be assigned a default value even if not associated with an
initialization parameter:
.PP
.Vb 2
\& my @hash  :Field  :Default({});
\& my @tuple :Field  :Default([1, \*(Aqbar\*(Aq]);
.Ve
.PP
Note that when using \f(CW\*(C`:Default\*(C'\fR, the value must be properly structured Perl
code (e.g., strings must be quoted as illustrated above).
.PP
\&\f(CW\*(C`Default\*(C'\fR and \f(CW\*(C`:Default\*(C'\fR may be abbreviated to \f(CW\*(C`Def\*(C'\fR and \f(CW\*(C`:Def\*(C'\fR
respectively.
.PP
\fIGenerated Default Values\fR
.IX Subsection "Generated Default Values"
.PP
It is also possible to \fIgenerate\fR default values on a per object basis by
using code in the \f(CW\*(C`:Default\*(C'\fR directive.
.PP
.Vb 2
\& my @IQ :Field  :Default(50 + rand 100);
\& my @ID :Field  :Default(our $next; ++$next);
.Ve
.PP
The above, for example, will initialize the \f(CW\*(C`IQ\*(C'\fR attribute of each new
object to a different random number, while its \f(CW\*(C`ID\*(C'\fR attribute will be
initialized with a sequential integer.
.PP
The code in a \f(CW\*(C`:Default\*(C'\fR specifier can also refer to the object being
initialized, either as \f(CW$_[0]\fR or as \f(CW$self\fR.  For example:
.PP
.Vb 1
\& my @unique_ID :Field  :Default($self\->gen_unique_ID);
.Ve
.PP
Any code specified as a default will \fInot\fR have access to the surrounding
lexical scope.  For example, this will not work:
.PP
.Vb 2
\& my $MAX = 100;
\& my $MIN = 0;
\&
\& my @bar :Field
\&         :Default($MIN + rand($MAX\-$MIX));     # Error
.Ve
.PP
For anything lexical or complex, you should factor the initializer out into
a utility subroutine:
.PP
.Vb 4
\& sub _rand_max :Restricted
\& {
\&     $MIN + rand($MAX\-$MIX)
\& }
\&
\& my @bar :Field
\&         :Default(_rand_max);
.Ve
.PP
When specifying a generated default using the \f(CW\*(C`Default\*(C'\fR tag inside an \f(CW\*(C`:Arg\*(C'\fR
directive, you will need to wrap the code in a \f(CW\*(C`sub { }\*(C'\fR, and \f(CW$_[0]\fR (but
not \f(CW$self\fR) can be used to access the object being initialized:
.PP
.Vb 2
\& my @baz :Field
\&         :Arg(Name => \*(Aqbaz\*(Aq, Default => sub { $_[0]\->biz });
.Ve
.PP
System functions need to similarly be wrapped in \f(CW\*(C`sub { }\*(C'\fR:
.PP
.Vb 3
\& my @rand :Field
\&          :Type(numeric)
\&          :Arg(Name => \*(AqRand\*(Aq, Default => sub { rand });
.Ve
.PP
Subroutines can be accessed using a code reference:
.PP
.Vb 2
\& my @data :Field
\&          :Arg(Name => \*(AqData\*(Aq, Default => \e&gen_default);
.Ve
.PP
On the other hand, the above can also be simplified by using the \f(CW\*(C`:Default\*(C'\fR
directive instead:
.PP
.Vb 3
\& my @baz  :Field  :Arg(baz)   :Default($self\->biz);
\& my @rand :Field  :Arg(Rand)  :Default(rand)  :Type(numeric);
\& my @data :Field  :Arg(Data)  :Default(gen_default);
.Ve
.PP
Using generated defaults in the \f(CW\*(C`:InitArgs\*(C'\fR hash requires the use of the same
types of syntax as with the \f(CW\*(C`Default\*(C'\fR tag in an \f(CW\*(C`:Arg\*(C'\fR directive:
.PP
.Vb 11
\& my %init_args :InitArgs = (
\&     \*(AqBaz\*(Aq => {
\&         \*(AqDefault\*(Aq => sub { $_[0]\->biz },
\&     },
\&     \*(AqRand\*(Aq => {
\&         \*(AqDefault\*(Aq => sub { rand },
\&     },
\&     \*(AqData\*(Aq => {
\&         \*(AqDefault\*(Aq => \e&gen_default,
\&     },
\& );
.Ve
.PP
\fISequential defaults\fR
.IX Subsection "Sequential defaults"
.PP
In the previous section, one of the examples is not as safe or as convenient
as it should be:
.PP
.Vb 1
\& my @ID :Field  :Default(our $next; ++$next);
.Ve
.PP
The problem is the shared variable (\f(CW$next\fR) that's needed to track the
allocation of \f(CW\*(C`ID\*(C'\fR values.  Because it has to persist between calls, that
variable has to be a package variable, except under Perl 5.10 or later where
it could be a state variable instead:
.PP
.Vb 1
\& use feature \*(Aqstate\*(Aq;
\&
\& my @ID :Field  :Default(state $next; ++$next);
.Ve
.PP
The version with the package variable is unsafe, because anyone could then
spoof \s-1ID\s0 numbers just by reassigning that universally accessible variable:
.PP
.Vb 2
\&    $MyClass::next = 0;        # Spoof the next object
\&    my $obj = MyClass\->new;    # Object now has ID 1
.Ve
.PP
The state-variable version avoids this problem, but even that version is
more complicated (and hence more error-prone) than it needs to be.
.PP
The \f(CW\*(C`:SequenceFrom\*(C'\fR directive (which can be abbreviated to \f(CW\*(C`:SeqFrom\*(C'\fR or
\&\f(CW\*(C`:Seq\*(C'\fR) makes it much easier to specify that an attribute's default value is
taken from a linearly increasing sequence.  For instance, the \s-1ID\s0 example above
could be rewritten as:
.PP
.Vb 1
\& my @ID :Field  :SequenceFrom(1);
.Ve
.PP
This directive automatically creates a hidden variable, initializes it to the
initial value specified, generates a sequence starting at that initial value,
and then uses successive elements of that sequence each time a default value
is needed for that attribute during object creation.
.PP
If the initial value is a scalar, then the default sequence is generated by
by computing \f(CW\*(C`$previous_value++\*(C'\fR.  If it is an object, it is generated by
calling \f(CW\*(C`$obj\->next()\*(C'\fR (or by calling \f(CW\*(C`$obj++\*(C'\fR if the object doesn't
have a \f(CW\*(C`next()\*(C'\fR method).
.PP
This makes it simple to create a series of objects with attributes whose
values default to simple numeric, alphabetic, or alphanumeric sequences,
or to the sequence specified by an iterator object of some kind:
.PP
.Vb 1
\& my @ID :Field  :SeqFrom(1);                 # 1, 2, 3...
\&
\& my @ID :Field  :SeqFrom(\*(AqAAA\*(Aq);             # \*(AqAAA\*(Aq, \*(AqAAB\*(Aq, \*(AqAAC\*(Aq...
\&
\& my @ID :Field  :SeqFrom(\*(AqA01\*(Aq);             # \*(AqA01\*(Aq, \*(AqA02\*(Aq, \*(AqA03\*(Aq...
\&
\& my @ID :Field  :SeqFrom(ID_Iterator\->new);  # \->next, \->next, \->next...
.Ve
.PP
In every other respect a \f(CW\*(C`:SequenceFrom\*(C'\fR directive is just like a
\&\f(CW\*(C`:Default\*(C'\fR.  For example, it can be used in conjunction with the \f(CW\*(C`:Arg\*(C'\fR
directive as follows:
.PP
.Vb 1
\& my @ID :Field  :Arg(ID)  :SeqFrom(1);
.Ve
.PP
However, not as a tag inside the \f(CW\*(C`:Arg\*(C'\fR directive:
.PP
.Vb 1
\& my @ID :Field  :Arg(\*(AqName\*(Aq => \*(AqID\*(Aq, \*(AqSeqFrom\*(Aq => 1)   # WRONG
.Ve
.PP
For the \f(CW\*(C`:InitArgs\*(C'\fR hash, you will need to \fIroll your own\fR sequential
defaults if required:
.PP
.Vb 1
\& use feature \*(Aqstate\*(Aq;
\&
\& my %init_args :InitArgs = (
\&     \*(AqCounter\*(Aq => {
\&         \*(AqDefault\*(Aq => sub { state $next; ++$next }
\&     },
\& );
.Ve
.SS "Parameter Name Matching"
.IX Subsection "Parameter Name Matching"
Rather than having to rely on exact matches to parameter keys in the
\&\f(CW\*(C`\->new()\*(C'\fR argument list, you can specify a regular expressions to be used
to match them to field-specific parameters:
.PP
.Vb 2
\& my @param :Field
\&           :Arg(\*(AqName\*(Aq => \*(Aqparam\*(Aq, \*(AqRegexp\*(Aq => qr/^PARA?M$/i);
.Ve
.PP
In this case, the parameter's key could be any of the following: \s-1PARAM\s0, \s-1PARM\s0,
Param, Parm, param, parm, and so on.  And the following would result in
\&\f(CW$data\fR being placed in \f(CW\*(C`My::Class\*(C'\fR's \f(CW@param\fR field during object
creation:
.PP
.Vb 1
\& my $obj = My::Class\->new(\*(AqParm\*(Aq => $data);
.Ve
.PP
For \f(CW\*(C`:Init\*(C'\fR handled parameters, you would similarly use:
.PP
.Vb 5
\& my %init_args :InitArgs = (
\&     \*(AqParam\*(Aq => {
\&         \*(AqRegex\*(Aq => qr/^PARA?M$/i,
\&     },
\& );
.Ve
.PP
In this case, the match results in \f(CW\*(C`{\ \*(AqParam\*(Aq\ =>\ $data\ }\*(C'\fR being sent
to the \f(CW\*(C`:Init\*(C'\fR subroutine as the argument hash.  Note that the \f(CW\*(C`:InitArgs\*(C'\fR
hash key is substituted for the original argument key.  This eliminates the
need for any parameter key pattern matching within the \f(CW\*(C`:Init\*(C'\fR subroutine.
.PP
\&\f(CW\*(C`Regexp\*(C'\fR may be abbreviated to \f(CW\*(C`Regex\*(C'\fR or \f(CW\*(C`Re\*(C'\fR.
.SS "Object Pre-initialization"
.IX Subsection "Object Pre-initialization"
Occasionally, a child class may need to send a parameter to a parent class as
part of object initialization.  This can be accomplished by supplying a
\&\f(CW\*(C`:PreInit\*(C'\fR labeled subroutine in the child class.  These subroutines, if
found, are called in order from the bottom of the class hierarchy upward
(i.e., child classes first).
.PP
The subroutine should expect two arguments:  The newly created
(uninitialized) object (i.e., \f(CW$self\fR), and a hash ref of all the parameters
from the \f(CW\*(C`\->new()\*(C'\fR method call, including any additional parameters added
by other \f(CW\*(C`:PreInit\*(C'\fR subroutines.
.PP
.Vb 5
\& sub pre_init :PreInit
\& {
\&     my ($self, $args) = @_;
\&     ...
\& }
.Ve
.PP
The parameter hash ref will not be exactly as supplied to \f(CW\*(C`\->new()\*(C'\fR, but
will be \fIflattened\fR into a single hash ref.  For example,
.PP
.Vb 8
\& my $obj = My::Class\->new(
\&     \*(Aqparam_X\*(Aq => \*(Aqvalue_X\*(Aq,
\&     {
\&         \*(Aqparam_A\*(Aq => \*(Aqvalue_A\*(Aq,
\&         \*(Aqparam_B\*(Aq => \*(Aqvalue_B\*(Aq,
\&     },
\&     \*(AqMy::Class\*(Aq => { \*(Aqparam\*(Aq => \*(Aqvalue\*(Aq },
\& );
.Ve
.PP
would produce
.PP
.Vb 6
\& {
\&     \*(Aqparam_X\*(Aq => \*(Aqvalue_X\*(Aq,
\&     \*(Aqparam_A\*(Aq => \*(Aqvalue_A\*(Aq,
\&     \*(Aqparam_B\*(Aq => \*(Aqvalue_B\*(Aq,
\&     \*(AqMy::Class\*(Aq => { \*(Aqparam\*(Aq => \*(Aqvalue\*(Aq }
\& }
.Ve
.PP
as the hash ref to the \f(CW\*(C`:PreInit\*(C'\fR subroutine.
.PP
The \f(CW\*(C`:PreInit\*(C'\fR subroutine may then add, modify or even remove any parameters
from the hash ref as needed for its purposes.  After all the \f(CW\*(C`:PreInit\*(C'\fR
subroutines have been executed, object initialization will then proceed using
the resulting parameter hash.
.PP
The \f(CW\*(C`:PreInit\*(C'\fR subroutine should not try to set data in its class's fields or
in other class's fields (e.g., using \fIset\fR methods) as such changes will be
overwritten during initialization phase which follows pre-initialization.  The
\&\f(CW\*(C`:PreInit\*(C'\fR subroutine is only intended for modifying initialization
parameters prior to initialization.
.SS "Initialization Sequence"
.IX Subsection "Initialization Sequence"
For the most part, object initialization can be conceptualized as proceeding
from parent classes down through child classes.  As such, calling child class
methods from a parent class during object initialization may not work because
the object will not have been fully initialized in the child classes.
.PP
Knowing the order of events during object initialization may help in
determining when this can be done safely:
.ie n .IP "1.  The scalar reference for the object is created, populated with an ""Object \s-1ID\s0"", and blessed into the appropriate class." 4
.el .IP "1.  The scalar reference for the object is created, populated with an ``Object \s-1ID\s0'', and blessed into the appropriate class." 4
.IX Item "1.  The scalar reference for the object is created, populated with an Object ID, and blessed into the appropriate class."
.PD 0
.IP "2.  :PreInit subroutines are called in order from the bottom of the class hierarchy upward (i.e., child classes first)." 4
.IX Item "2.  :PreInit subroutines are called in order from the bottom of the class hierarchy upward (i.e., child classes first)."
.ie n .IP "3.  From the top of the class hierarchy downward (i.e., parent classes first), ""Default Values"" are assigned to fields.  (These may be overwritten by subsequent steps below.)" 4
.el .IP "3.  From the top of the class hierarchy downward (i.e., parent classes first), ``Default Values'' are assigned to fields.  (These may be overwritten by subsequent steps below.)" 4
.IX Item "3.  From the top of the class hierarchy downward (i.e., parent classes first), Default Values are assigned to fields.  (These may be overwritten by subsequent steps below.)"
.ie n .IP "4.  From the top of the class hierarchy downward, parameters to the ""\->new()"" method are processed for "":Arg"" field attributes and entries in the "":InitArgs"" hash:" 4
.el .IP "4.  From the top of the class hierarchy downward, parameters to the \f(CW\->new()\fR method are processed for \f(CW:Arg\fR field attributes and entries in the \f(CW:InitArgs\fR hash:" 4
.IX Item "4.  From the top of the class hierarchy downward, parameters to the ->new() method are processed for :Arg field attributes and entries in the :InitArgs hash:"
.RS 4
.ie n .IP "a.  ""Parameter Preprocessing"" is performed." 4
.el .IP "a.  ``Parameter Preprocessing'' is performed." 4
.IX Item "a.  Parameter Preprocessing is performed."
.ie n .IP "b.  Checks for ""Mandatory Parameters"" are made." 4
.el .IP "b.  Checks for ``Mandatory Parameters'' are made." 4
.IX Item "b.  Checks for Mandatory Parameters are made."
.ie n .IP "c.  ""Default Values"" specified in the "":InitArgs"" hash are added for subsequent processing by the "":Init"" subroutine." 4
.el .IP "c.  ``Default Values'' specified in the \f(CW:InitArgs\fR hash are added for subsequent processing by the \f(CW:Init\fR subroutine." 4
.IX Item "c.  Default Values specified in the :InitArgs hash are added for subsequent processing by the :Init subroutine."
.IP "d.  Type checking is performed." 4
.IX Item "d.  Type checking is performed."
.ie n .IP "e.  ""Field-Specific Parameters"" are assigned to fields." 4
.el .IP "e.  ``Field-Specific Parameters'' are assigned to fields." 4
.IX Item "e.  Field-Specific Parameters are assigned to fields."
.RE
.RS 4
.RE
.ie n .IP "5.  From the top of the class hierarchy downward, :Init subroutines are called with parameters specified in the "":InitArgs"" hash." 4
.el .IP "5.  From the top of the class hierarchy downward, :Init subroutines are called with parameters specified in the \f(CW:InitArgs\fR hash." 4
.IX Item "5.  From the top of the class hierarchy downward, :Init subroutines are called with parameters specified in the :InitArgs hash."
.ie n .IP "6.  Checks are made for any parameters to ""\->new()"" that were not handled in the above.  (See next section.)" 4
.el .IP "6.  Checks are made for any parameters to \f(CW\->new()\fR that were not handled in the above.  (See next section.)" 4
.IX Item "6.  Checks are made for any parameters to ->new() that were not handled in the above.  (See next section.)"
.PD
.SS "Unhandled Parameters"
.IX Subsection "Unhandled Parameters"
It is an error to include any parameters to the \f(CW\*(C`\->new()\*(C'\fR method that are
not handled by at least one class in the hierarchy.  The primary purpose of
this is to catch typos in parameter names:
.PP
.Vb 1
\&  my $obj = Person\->new(\*(Aqnane\*(Aq => \*(AqJohn\*(Aq);   # Should be \*(Aqname\*(Aq
.Ve
.PP
The only time that checks for unhandled parameters are not made is when at
least one class in the hierarchy does not have an \f(CW\*(C`:InitArgs\*(C'\fR hash \fBand\fR
does not use the \f(CW\*(C`:Arg\*(C'\fR attribute on any of its fields \fBand\fR uses an
:Init subroutine for processing
parameters.  In such a case, it is not possible for Object::InsideOut to
determine which if any of the parameters are not handled by the \f(CW\*(C`:Init\*(C'\fR
subroutine.
.PP
If you add the following construct to the start of your application:
.PP
.Vb 4
\& BEGIN {
\&     no warnings \*(Aqonce\*(Aq;
\&     $OIO::Args::Unhandled::WARN_ONLY = 1;
\& }
.Ve
.PP
then unhandled parameters will only generate warnings rather than causing
exceptions to be thrown.
.ie n .SS "Modifying "":InitArgs"""
.el .SS "Modifying \f(CW:InitArgs\fP"
.IX Subsection "Modifying :InitArgs"
For performance purposes, Object::InsideOut \fInormalizes\fR each class's
\&\f(CW\*(C`:InitArgs\*(C'\fR hash by creating keys in the form of \f(CW\*(Aq_X\*(Aq\fR for the various
options it handles (e.g., \f(CW\*(Aq_R\*(Aq\fR for \f(CW\*(AqRegexp\*(Aq\fR).
.PP
If a class has the unusual requirement to modify its \f(CW\*(C`:InitArgs\*(C'\fR hash during
runtime, then it must renormalize the hash after making such changes by
invoking \f(CW\*(C`Object::InsideOut::normalize()\*(C'\fR on it so that Object::InsideOut
will pick up the changes:
.PP
.Vb 1
\& Object::InsideOut::normalize(\e%init_args);
.Ve
.SH "ACCESSOR GENERATION"
.IX Header "ACCESSOR GENERATION"
Accessors are object methods used to get data out of and put data into an
object.  You can, of course, write your own accessor code, but this can get a
bit tedious, especially if your class has lots of fields.  Object::InsideOut
provides the capability to automatically generate accessors for you.
.SS "Basic Accessors"
.IX Subsection "Basic Accessors"
A \fIget\fR accessor is vary basic:  It just returns the value of an object's
field:
.PP
.Vb 1
\& my @data :Field;
\&
\& sub fetch_data
\& {
\&     my $self = shift;
\&     return ($data[$$self]);
\& }
.Ve
.PP
and you would use it as follows:
.PP
.Vb 1
\& my $data = $obj\->fetch_data();
.Ve
.PP
To have Object::InsideOut generate such a \fIget\fR accessor for you, add a
\&\f(CW\*(C`:Get\*(C'\fR attribute to the field declaration, specifying the name for the
accessor in parentheses:
.PP
.Vb 1
\& my @data :Field :Get(fetch_data);
.Ve
.PP
Similarly, a \fIset\fR accessor puts data in an object's field.  The \fIset\fR
accessors generated by Object::InsideOut check that they are called with at
least one argument.  They are specified using the \f(CW\*(C`:Set\*(C'\fR attribute:
.PP
.Vb 1
\& my @data :Field :Set(store_data);
.Ve
.PP
Some programmers use the convention of naming \fIget\fR and \fIset\fR accessors
using \fIget_\fR and \fIset_\fR prefixes.  Such \fIstandard\fR accessors can be
generated using the \f(CW\*(C`:Standard\*(C'\fR attribute (which may be abbreviated to
\&\f(CW\*(C`:Std\*(C'\fR):
.PP
.Vb 1
\& my @data :Field :Std(data);
.Ve
.PP
which is equivalent to:
.PP
.Vb 1
\& my @data :Field :Get(get_data) :Set(set_data);
.Ve
.PP
Other programmers prefer to use a single \fIcombination\fR accessors that
performs both functions:  When called with no arguments, it \fIgets\fR, and when
called with an argument, it \fIsets\fR.  Object::InsideOut will generate such
accessors with the \f(CW\*(C`:Accessor\*(C'\fR attribute.  (This can be abbreviated to
\&\f(CW\*(C`:Acc\*(C'\fR, or you can use \f(CW\*(C`:Get_Set\*(C'\fR or \f(CW\*(C`:Combined\*(C'\fR or \f(CW\*(C`:Combo\*(C'\fR or even
\&\f(CW\*(C`Mutator\*(C'\fR.)  For example:
.PP
.Vb 1
\& my @data :Field :Acc(data);
.Ve
.PP
The generated accessor would be used in this manner:
.PP
.Vb 2
\& $obj\->data($val);           # Puts data into the object\*(Aqs field
\& my $data = $obj\->data();    # Fetches the object\*(Aqs field data
.Ve
.SS "\fISet\fP Accessor Return Value"
.IX Subsection "Set Accessor Return Value"
For any of the automatically generated methods that perform \fIset\fR operations,
the default for the method's return value is the value being set (i.e., the
\&\fInew\fR value).
.PP
You can specify the \fIset\fR accessor's return value using the \f(CW\*(C`Return\*(C'\fR
attribute parameter (which may be abbreviated to \f(CW\*(C`Ret\*(C'\fR).  For example, to
explicitly specify the default behavior use:
.PP
.Vb 1
\& my @data :Field :Set(\*(AqName\*(Aq => \*(Aqstore_data\*(Aq, \*(AqReturn\*(Aq => \*(AqNew\*(Aq);
.Ve
.PP
You can specify that the accessor should return the \fIold\fR (previous) value
(or \f(CW\*(C`undef\*(C'\fR if unset):
.PP
.Vb 1
\& my @data :Field :Acc(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqRet\*(Aq => \*(AqOld\*(Aq);
.Ve
.PP
You may use \f(CW\*(C`Previous\*(C'\fR, \f(CW\*(C`Prev\*(C'\fR or \f(CW\*(C`Prior\*(C'\fR as synonyms for \f(CW\*(C`Old\*(C'\fR.
.PP
Finally, you can specify that the accessor should return the object itself:
.PP
.Vb 1
\& my @data :Field :Std(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqRet\*(Aq => \*(AqObject\*(Aq);
.Ve
.PP
\&\f(CW\*(C`Object\*(C'\fR may be abbreviated to \f(CW\*(C`Obj\*(C'\fR, and is also synonymous with \f(CW\*(C`Self\*(C'\fR.
.SS "Method Chaining"
.IX Subsection "Method Chaining"
An obvious case where method chaining can be used is when a field is used to
store an object:  A method for the stored object can be chained to the \fIget\fR
accessor call that retrieves that object:
.PP
.Vb 1
\& $obj\->get_stored_object()\->stored_object_method()
.Ve
.PP
Chaining can be done off of \fIset\fR accessors based on their return value (see
above).  In this example with a \fIset\fR accessor that returns the \fInew\fR value:
.PP
.Vb 1
\& $obj\->set_stored_object($stored_obj)\->stored_object_method()
.Ve
.PP
the \fI\fIset_stored_object()\fI\fR call stores the new object, returning it as well,
and then the \fI\fIstored_object_method()\fI\fR call is invoked via the stored/returned
object.  The same would work for \fIset\fR accessors that return the \fIold\fR
value, too, but in that case the chained method is invoked via the previously
stored (and now returned) object.
.PP
If the Want module (version 0.12 or later) is available, then
Object::InsideOut also tries to do \fIthe right thing\fR with method chaining for
\&\fIset\fR accessors that don't store/return objects.  In this case, the object
used to invoke the \fIset\fR accessor will also be used to invoke the chained
method (just as though the \fIset\fR accessor were declared with
\&\f(CW\*(AqReturn\*(Aq\ =>\ \*(AqObject\*(Aq\fR):
.PP
.Vb 1
\& $obj\->set_data(\*(Aqdata\*(Aq)\->do_something();
.Ve
.PP
To make use of this feature, just add \f(CW\*(C`use Want;\*(C'\fR to the beginning of your
application.
.PP
Note, however, that this special handling does not apply to \fIget\fR accessors,
nor to \fIcombination\fR accessors invoked without an argument (i.e., when used
as a \fIget\fR accessor).  These must return objects in order for method chaining
to succeed.
.SS ":lvalue Accessors"
.IX Subsection ":lvalue Accessors"
As documented in \*(L"Lvalue subroutines\*(R" in perlsub, an \f(CW\*(C`:lvalue\*(C'\fR subroutine
returns a modifiable value.  This modifiable value can then, for example, be
used on the left-hand side (hence \f(CW\*(C`LVALUE\*(C'\fR) of an assignment statement, or
a substitution regular expression.
.PP
For Perl 5.8.0 and later, Object::InsideOut supports the generation of
\&\f(CW\*(C`:lvalue\*(C'\fR accessors such that their use in an \f(CW\*(C`LVALUE\*(C'\fR context will set the
value of the object's field.  Just add \f(CW\*(C`\*(Aqlvalue\*(Aq => 1\*(C'\fR to the \fIset\fR
accessor's attribute.  (\f(CW\*(Aqlvalue\*(Aq\fR may be abbreviated to \f(CW\*(Aqlv\*(Aq\fR.)
.PP
Additionally, \f(CW\*(C`:Lvalue\*(C'\fR (or its abbreviation \f(CW\*(C`:lv\*(C'\fR) may be used for a
combined \fIget/set\fR \fI:lvalue\fR accessor.  In other words, the following are
equivalent:
.PP
.Vb 1
\& :Acc(\*(AqName\*(Aq => \*(Aqemail\*(Aq, \*(Aqlvalue\*(Aq => 1)
\&
\& :Lvalue(email)
.Ve
.PP
Here is a detailed example:
.PP
.Vb 2
\& package Contact; {
\&     use Object::InsideOut;
\&
\&     # Create separate a get accessor and an :lvalue set accessor
\&     my @name  :Field
\&               :Get(name)
\&               :Set(\*(AqName\*(Aq => \*(Aqset_name\*(Aq, \*(Aqlvalue\*(Aq => 1);
\&
\&     # Create a standard get_/set_ pair of accessors
\&     #   The set_ accessor will be an :lvalue accessor
\&     my @phone :Field
\&               :Std(\*(AqName\*(Aq => \*(Aqphone\*(Aq, \*(Aqlvalue\*(Aq => 1);
\&
\&     # Create a combined get/set :lvalue accessor
\&     my @email :Field
\&               :Lvalue(email);
\& }
\&
\& package main;
\&
\& my $obj = Contact\->new();
\&
\& # Use :lvalue accessors in assignment statements
\& $obj\->set_name()  = \*(AqJerry D. Hedden\*(Aq;
\& $obj\->set_phone() = \*(Aq800\-555\-1212\*(Aq;
\& $obj\->email()     = \*(Aqjdhedden AT cpan DOT org\*(Aq;
\&
\& # Use :lvalue accessor in substituion regexp
\& $obj\->email() =~ s/ AT (\ew+) DOT /\e@$1./;
\&
\& # Use :lvalue accessor in a \*(Aqsubstr\*(Aq call
\& substr($obj\->set_phone(), 0, 3) = \*(Aq888\*(Aq;
\&
\& print("Contact info:\en");
\& print("\etName:  ", $obj\->name(),      "\en");
\& print("\etPhone: ", $obj\->get_phone(), "\en");
\& print("\etEmail: ", $obj\->email(),     "\en");
.Ve
.PP
The use of \f(CW\*(C`:lvalue\*(C'\fR accessors requires the installation of the Want
module (version 0.12 or later) from \s-1CPAN\s0.  See particularly the section
\&\*(L"Lvalue subroutines:\*(R" in Want for more information.
.PP
\&\f(CW\*(C`:lvalue\*(C'\fR accessors also work like regular \fIset\fR accessors in being able to
accept arguments, return values, and so on:
.PP
.Vb 4
\& my @pri :Field
\&         :Lvalue(\*(AqName\*(Aq => \*(Aqpriority\*(Aq, \*(AqReturn\*(Aq => \*(AqOld\*(Aq);
\&  ...
\& my $old_pri = $obj\->priority(10);
.Ve
.PP
\&\f(CW\*(C`:lvalue\*(C'\fR accessors can be used in method chains.
.PP
\&\fBCaveats\fR:
While still classified as \fIexperimental\fR, Perl's support for \f(CW\*(C`:lvalue\*(C'\fR
subroutines has been around since 5.6.0, and a good number of \s-1CPAN\s0 modules
make use of them.
.PP
By definition, because \f(CW\*(C`:lvalue\*(C'\fR accessors return the \fIlocation\fR of a field,
they break encapsulation.  As a result, some \s-1OO\s0 advocates eschew the use of
\&\f(CW\*(C`:lvalue\*(C'\fR accessors.
.PP
\&\f(CW\*(C`:lvalue\*(C'\fR accessors are slower than corresponding \fInon-lvalue\fR accessors.
This is due to the fact that more code is needed to handle all the diverse
ways in which \f(CW\*(C`:lvalue\*(C'\fR accessors may be used.  (I've done my best to
optimize the generated code.)  For example, here's the code that is generated
for a simple combined accessor:
.PP
.Vb 4
\& *Foo::foo = sub {
\&     return ($$field[${$_[0]}]) if (@_ == 1);
\&     $$field[${$_[0]}] = $_[1];
\& };
.Ve
.PP
And the corresponding code for an \f(CW\*(C`:lvalue\*(C'\fR combined accessor:
.PP
.Vb 10
\& *Foo::foo = sub :lvalue {
\&     my $rv = !Want::want_lvalue(0);
\&     Want::rreturn($$field[${$_[0]}]) if ($rv && (@_ == 1));
\&     my $assign;
\&     if (my @args = Want::wantassign(1)) {
\&         @_ = ($_[0], @args);
\&         $assign = 1;
\&     }
\&     if (@_ > 1) {
\&         $$field[${$_[0]}] = $_[1];
\&         Want::lnoreturn if $assign;
\&         Want::rreturn($$field[${$_[0]}]) if $rv;
\&     }
\&     ((@_ > 1) && (Want::wantref() eq \*(AqOBJECT\*(Aq) &&
\&      !Scalar::Util::blessed($$field[${$_[0]}]))
\&            ? $_[0] : $$field[${$_[0]}];
\& };
.Ve
.SH "ALL-IN-ONE"
.IX Header "ALL-IN-ONE"
Parameter naming and accessor generation may be combined:
.PP
.Vb 1
\& my @data :Field :All(data);
.Ve
.PP
This is \fIsyntactic shorthand\fR for:
.PP
.Vb 1
\& my @data :Field :Arg(data) :Acc(data);
.Ve
.PP
If you want the accessor to be \f(CW\*(C`:lvalue\*(C'\fR, use:
.PP
.Vb 1
\& my @data :Field :LV_All(data);
.Ve
.PP
If \fIstandard\fR accessors are desired, use:
.PP
.Vb 1
\& my @data :Field :Std_All(data);
.Ve
.PP
Attribute parameters affecting the \fIset\fR accessor may also be used.  For
example, if you want \fIstandard\fR accessors with an \f(CW\*(C`:lvalue\*(C'\fR \fIset\fR accessor:
.PP
.Vb 1
\& my @data :Field :Std_All(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqLvalue\*(Aq => 1);
.Ve
.PP
If you want a combined accessor that returns the \fIold\fR value on \fIset\fR
operations:
.PP
.Vb 1
\& my @data :Field :All(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqRet\*(Aq => \*(AqOld\*(Aq);
.Ve
.PP
And so on.
.PP
If you need to add attribute parameters that affect the \f(CW\*(C`:Arg\*(C'\fR portion
(e.g., \f(CW\*(C`Default\*(C'\fR, \f(CW\*(C`Mandatory\*(C'\fR, etc.), then you cannot use \f(CW\*(C`:All\*(C'\fR.  Fall
back to using the separate attributes.  For example:
.PP
.Vb 2
\& my @data :Field :Arg(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqMand\*(Aq => 1)
\&                 :Acc(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqRet\*(Aq => \*(AqOld\*(Aq);
.Ve
.SH "READONLY FIELDS"
.IX Header "READONLY FIELDS"
If you want to declare a \fIread-only\fR field (i.e., one that can be initialized
and retrieved, but which doesn't have a \fIset\fR accessor):
.PP
.Vb 1
\& my @data :Field :Arg(data) :Get(data);
.Ve
.PP
there is a \fIsyntactic shorthand\fR for that, too:
.PP
.Vb 1
\& my @data :Field :ReadOnly(data);
.Ve
.PP
or just:
.PP
.Vb 1
\& my @data :Field :RO(data);
.Ve
.PP
If a \fIstandard\fR \fIget\fR accessor is desired, use:
.PP
.Vb 1
\& my @data :Field :Std_RO(data);
.Ve
.PP
For obvious reasons, attribute parameters affecting the \fIset\fR accessor cannot
be used with read-only fields, nor can \f(CW\*(C`:ReadOnly\*(C'\fR be combined with
\&\f(CW\*(C`:LValue\*(C'\fR.
.PP
As with \f(CW\*(C`:All\*(C'\fR, if you need to add attribute parameters that affect the
\&\f(CW\*(C`:Arg\*(C'\fR portion then you cannot use the \f(CW\*(C`:RO\*(C'\fR shorthand:  Fall back to using
the separate attributes in such cases.  For example:
.PP
.Vb 2
\& my @data :Field :Arg(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqMand\*(Aq => 1)
\&                 :Get(\*(AqName\*(Aq => \*(Aqdata\*(Aq);
.Ve
.SH "DELEGATORS"
.IX Header "DELEGATORS"
In addition to autogenerating accessors for a given field, you can also
autogenerate \fIdelegators\fR to that field.  A delegator is an accessor that
forwards its call to one of the object's fields.
.PP
For example, if your \fICar\fR object has an \f(CW@engine\fR field, then you might
need to send all acceleration requests to the \fIEngine\fR object stored in that
field.  Likewise, all braking requests may need to be forwarded to \fICar\fR's
field that stores the \fIBrakes\fR object:
.PP
.Vb 2
\& package Car; {
\&     use Object::InsideOut;
\&
\&     my @engine :Field :Get(engine);
\&     my @brakes :Field :Get(brakes);
\&
\&     sub _init :Init(private)  {
\&         my ($self, $args) = @_;
\&
\&         $self\->engine(Engine\->new());
\&         $self\->brakes(Brakes\->new());
\&     }
\&
\&     sub accelerate {
\&         my ($self) = @_;
\&         $self\->engine\->accelerate();
\&     }
\&
\&     sub decelerate {
\&         my ($self) = @_;
\&         $self\->engine\->decelerate();
\&     }
\&
\&     sub brake {
\&         my ($self, $foot_pressure) = @_;
\&         $self\->brakes\->brake($foot_pressure);
\&     }
\& }
.Ve
.PP
If the \fICar\fR needs to forward other method calls to its \fIEngine\fR or
\&\fIBrakes\fR, this quickly becomes tedious, repetitive, and error-prone. So,
instead, you can just tell Object::InsideOut that a particular method should
be automatically forwarded to a particular field, by specifying a \f(CW\*(C`:Handles\*(C'\fR
attribute:
.PP
.Vb 2
\& package Car; {
\&     use Object::InsideOut;
\&
\&     my @engine :Field
\&                :Get(engine)
\&                :Handles(accelerate, decelerate);
\&     my @brakes :Field
\&                :Get(brakes)
\&                :Handles(brake);
\&
\&     sub _init :Init(private)  {
\&         my ($self, $args) = @_;
\&
\&         $self\->engine(Engine\->new());
\&         $self\->brakes(Brakes\->new());
\&     }
\& }
.Ve
.PP
This option generates and installs a single delegator method for each of its
arguments, so the second example has exactly the same effect as the first
example. The delegator simply calls the corresponding method on the object
stored in the field, passing it the same argument list it received.
.PP
Sometimes, however, you may need to delegate a particular method to a field,
but under a different name.  For example, if the \fIBrake\fR class provides an
\&\f(CW\*(C`engage()\*(C'\fR method, rather than a \f(CW\*(C`brake()\*(C'\fR method, then you'd need
\&\f(CW\*(C`Car::brake()\*(C'\fR to be implemented as:
.PP
.Vb 4
\&     sub brake {
\&         my ($self, $foot_pressure) = @_;
\&         $self\->brakes\->engage($foot_pressure);
\&     }
.Ve
.PP
You can achieve that using the \f(CW\*(C`:Handles\*(C'\fR attribute, like so:
.PP
.Vb 3
\&     my @brakes :Field
\&                :Get(brakes)
\&                :Handles(brake\-\->engage);
.Ve
.PP
The long arrow version still creates a delegator method \f(CW\*(C`brake()\*(C'\fR, but makes
that method delegate to your \fIBrakes\fR object by calling its \f(CW\*(C`engage()\*(C'\fR
method instead.
.PP
If you are delegating a large number of methods to a particular field, the
\&\f(CW\*(C`:Handles\*(C'\fR declarations soon become tedious:
.PP
.Vb 8
\& my @onboard_computer :Field :Get(comp)
\&                      :Type(Computer::Onboard)
\&                      :Handles(engine_monitor engine_diagnostics)
\&                      :Handles(engine_control airbag_deploy)
\&                      :Handles(GPS_control GPS_diagnostics GPS_reset)
\&                      :Handles(climate_control reversing_camera)
\&                      :Handles(cruise_control auto_park)
\&                      :Handles(iPod_control cell_phone_connect);
.Ve
.PP
And, of course, every time the interface of the \f(CW\*(C`Computer::Onboard\*(C'\fR class
changes, you have to change those \f(CW\*(C`:Handles\*(C'\fR declarations, too.
.PP
Sometimes, all you really want to say is: "This field should handle anything
it \fIcan\fR handle".  To do that, you write:
.PP
.Vb 3
\& my @onboard_computer :Field :Get(comp)
\&                      :Type(Computer::Onboard)
\&                      :Handles(Computer::Onboard);
.Ve
.PP
That is, if a \f(CW\*(C`:Handles\*(C'\fR directive is given a name that includes a \f(CW\*(C`::\*(C'\fR, it
treats that name as a class name, rather than a method name.  Then it checks
that class's metadata (see \s-1INTROSPECTION\s0), retrieves a list of all the
method names from the class, and uses that as the list of method names to
delegate.
.PP
Unlike an explicit \f(CW\*(C`:Handles( method_name )\*(C'\fR, a \f(CW\*(C`:Handles( Class::Name )\*(C'\fR is
tolerant of name collisions. If any method of \f(CW\*(C`Class::Name\*(C'\fR has the same name
as another method or delegator that has already been installed in the current
class, then \f(CW\*(C`:Handles\*(C'\fR just silently ignores that particular method, and
doesn't try to replace the existing one.  In other words, a
\&\f(CW\*(C`:Handles(Class::Name)\*(C'\fR won't install a delegator to a method in
\&\f(CW\*(C`Class::Name\*(C'\fR if that method is already being handled somewhere else by the
current class.
.PP
For classes that don't have a \f(CW\*(C`::\*(C'\fR in their name (e.g., \f(CW\*(C`DateTime\*(C'\fR and
\&\f(CW\*(C`POE\*(C'\fR), just append a \f(CW\*(C`::\*(C'\fR to the class name:
.PP
.Vb 4
\& my @init_time :Field :Get(init_time)
\&                      :Type(    DateTime        )
\&                      :Default( DateTime\->now() )
\&                      :Handles( DateTime::      );
.Ve
.PP
Note that, when using the class-based version of \f(CW\*(C`:Handles\*(C'\fR, every method is
delegated with its name unchanged.  If some of the object's methods should be
delegated under different names, you have to specify that explicitly (and
beforehand):
.PP
.Vb 5
\& my @onboard_computer :Field :Get(comp) :Type(Computer::Onboard)
\&                # rename this method when delegating...
\&                      :Handles( iPod_control\-\->get_iPod )
\&                # delegate everything else with names unchanged...
\&                      :Handles( Computer::Onboard );
.Ve
.PP
\&\f(CW\*(C`Handles\*(C'\fR may be abbreviated to \f(CW\*(C`Handle\*(C'\fR or \f(CW\*(C`Hand\*(C'\fR.
.PP
\&\s-1NOTES:\s0 Failure to add the appropriate object to the delegation field will lead
to errors such as:  \fBCan't call method \*(L"bar\*(R" on an undefined value\fR.
.PP
Typos in \f(CW\*(C`:Handles\*(C'\fR attribute declarations will lead to errors such as:
\&\fBCan't locate object method \*(L"bat\*(R" via package \*(L"Foo\*(R"\fR.  Adding an object of
the wrong class to the delegation field will lead to the same error, but can
be avoided by adding a \f(CW\*(C`:Type\*(C'\fR attribute for the appropriate class.
.SH "PERMISSIONS"
.IX Header "PERMISSIONS"
.SS "Restricted and Private Accessors"
.IX Subsection "Restricted and Private Accessors"
By default, automatically generated accessors, can
be called at any time.  In other words, their access permission is \fIpublic\fR.
.PP
If desired, accessors can be made \fIrestricted\fR \- in which case they can only
be called from within the class and any child classes in the hierarchy that
are derived from it \- or \fIprivate\fR \- such that they can only be called from
within the accessors' class.  Here are examples of the syntax for adding
permissions:
.PP
.Vb 4
\& my @data     :Field :Std(\*(AqName\*(Aq => \*(Aqdata\*(Aq,     \*(AqPermission\*(Aq => \*(Aqprivate\*(Aq);
\& my @info     :Field :Set(\*(AqName\*(Aq => \*(Aqset_info\*(Aq, \*(AqPerm\*(Aq => \*(Aqrestricted\*(Aq);
\& my @internal :Field :Acc(\*(AqName\*(Aq => \*(Aqinternal\*(Aq, \*(AqPrivate\*(Aq => 1);
\& my @state    :Field :Get(\*(AqName\*(Aq => \*(Aqstate\*(Aq,    \*(AqRestricted\*(Aq => 1);
.Ve
.PP
When creating a \fIstandard\fR pair of \fIget_/set_\fR accessors, the permission
setting is applied to both accessors.  If different permissions are required
on the two accessors, then you'll have to use separate \f(CW\*(C`:Get\*(C'\fR and \f(CW\*(C`:Set\*(C'\fR
attributes on the field.
.PP
.Vb 5
\& # Create a private set method
\& #  and a restricted get method on the \*(Aqfoo\*(Aq field
\& my @foo :Field
\&         :Set(\*(AqName\*(Aq => \*(Aqset_foo\*(Aq, \*(AqPriv\*(Aq => 1)
\&         :Get(\*(AqName\*(Aq => \*(Aqget_foo\*(Aq, \*(AqRest\*(Aq => 1);
\&
\& # Create a restricted set method
\& #  and a public get method on the \*(Aqbar\*(Aq field
\& my %bar :Field
\&         :Set(\*(AqName\*(Aq => \*(Aqset_bar\*(Aq, \*(AqPerm\*(Aq => \*(Aqrestrict\*(Aq)
\&         :Get(get_bar);
.Ve
.PP
\&\f(CW\*(C`Permission\*(C'\fR may be abbreviated to \f(CW\*(C`Perm\*(C'\fR; \f(CW\*(C`Private\*(C'\fR may be abbreviated to
\&\f(CW\*(C`Priv\*(C'\fR; and \f(CW\*(C`Restricted\*(C'\fR may be abbreviated to \f(CW\*(C`Restrict\*(C'\fR.
.SS "Restricted and Private Methods"
.IX Subsection "Restricted and Private Methods"
In the same vein as describe above, access to methods can be narrowed by use
of \f(CW\*(C`:Restricted\*(C'\fR and \f(CW\*(C`:Private\*(C'\fR attributes.
.PP
.Vb 5
\& sub foo :Restricted
\& {
\&     my $self = shift;
\&     ...
\& }
.Ve
.PP
Without either of these attributes, most methods have \fIpublic\fR access.  If
desired, you may explicitly label them with the \f(CW\*(C`:Public\*(C'\fR attribute.
.SS "Exemptions"
.IX Subsection "Exemptions"
It is also possible to specify classes that are exempt from the \fIRestricted\fR
and \fIPrivate\fR access permissions (i.e., the method may be called from those
classes as well):
.PP
.Vb 3
\& my %foo :Field
\&         :Acc(\*(AqName\*(Aq => \*(Aqfoo\*(Aq, \*(AqPerm\*(Aq => \*(AqRestrict(Exempt::Class)\*(Aq)
\&         :Get(get_bar);
\&
\& sub bar :Private(Some::Class, Another::Class)
\& {
\&     my $self = shift;
\&     ...
\& }
.Ve
.PP
An example of when this might be needed is with delegation mechanisms.
.SS "Hidden Methods"
.IX Subsection "Hidden Methods"
For subroutines marked with the following attributes (most of which are
discussed later in this document):
.IP ":ID" 4
.IX Item ":ID"
.PD 0
.IP ":PreInit" 4
.IX Item ":PreInit"
.IP ":Init" 4
.IX Item ":Init"
.IP ":Replicate" 4
.IX Item ":Replicate"
.IP ":Destroy" 4
.IX Item ":Destroy"
.IP ":Automethod" 4
.IX Item ":Automethod"
.IP ":Dumper" 4
.IX Item ":Dumper"
.IP ":Pumper" 4
.IX Item ":Pumper"
.IP ":MOD_*_ATTRS" 4
.IX Item ":MOD_*_ATTRS"
.IP ":FETCH_*_ATTRS" 4
.IX Item ":FETCH_*_ATTRS"
.PD
.PP
Object::InsideOut normally renders them uncallable (hidden) to class and
application code (as they should normally only be needed by Object::InsideOut
itself).  If needed, this behavior can be overridden by adding the \f(CW\*(C`Public\*(C'\fR,
\&\f(CW\*(C`Restricted\*(C'\fR or \f(CW\*(C`Private\*(C'\fR attribute parameters:
.PP
.Vb 3
\& sub _init :Init(private)    # Callable from within this class
\& {
\&     my ($self, $args) = @_;
\&
\&     ...
\& }
.Ve
.SS "Restricted and Private Classes"
.IX Subsection "Restricted and Private Classes"
Permission for object creation on a class can be narrowed by adding a
\&\f(CW\*(C`:Restricted\*(C'\fR or \f(CW\*(C`:Private\*(C'\fR flag to its \f(CW\*(C`use\ Object::InsideOut\ ...\*(C'\fR
declaration.  This basically adds \f(CW\*(C`:Restricted/:Private\*(C'\fR permissions on the
\&\f(CW\*(C`\->new()\*(C'\fR method for that class.  Exemptions are also supported.
.PP
.Vb 4
\& package Foo; {
\&     use Object::InsideOut;
\&     ...
\& }
\&
\& package Bar; {
\&     use Object::InsideOut \*(AqFoo\*(Aq, \*(Aq:Restricted(Ping, Pong)\*(Aq;
\&     ...
\& }
.Ve
.PP
In the above, class \f(CW\*(C`Bar\*(C'\fR inherits from class \f(CW\*(C`Foo\*(C'\fR, and its constructor is
restricted to itself, classes that inherit from \f(CW\*(C`Bar\*(C'\fR, and the classes
\&\f(CW\*(C`Ping\*(C'\fR and \f(CW\*(C`Pong\*(C'\fR.
.PP
As constructors are inherited, any class that inherits from \f(CW\*(C`Bar\*(C'\fR would also
be a restricted class.  To overcome this, any child class would need to add
its own permission declaration:
.PP
.Vb 4
\& package Baz; {
\&     use Object::InsideOut qw/Bar :Private(My::Class)/;
\&     ...
\& }
.Ve
.PP
Here, class \f(CW\*(C`Baz\*(C'\fR inherits from class \f(CW\*(C`Bar\*(C'\fR, and its constructor is
restricted to itself (i.e., private) and class \f(CW\*(C`My::Class\*(C'\fR.
.PP
Inheriting from a \f(CW\*(C`:Private\*(C'\fR class is permitted, but objects cannot be
created for that class unless it has a permission declaration of its own:
.PP
.Vb 4
\& package Zork; {
\&     use Object::InsideOut qw/:Public Baz/;
\&     ...
\& }
.Ve
.PP
Here, class \f(CW\*(C`Zork\*(C'\fR inherits from class \f(CW\*(C`Baz\*(C'\fR, and its constructor has
unrestricted access.  (In general, don't use the \f(CW\*(C`:Public\*(C'\fR declaration for a
class except to overcome constructor permissions inherited from parent
classes.)
.SH "TYPE CHECKING"
.IX Header "TYPE CHECKING"
Object::InsideOut can be directed to add type-checking code to the
\&\fIset/combined\fR accessors it generates, and to perform type checking on
object initialization parameters.
.SS "Field Type Checking"
.IX Subsection "Field Type Checking"
Type checking for a field can be specified by adding the \f(CW\*(C`:Type\*(C'\fR attribute to
the field declaration:
.PP
.Vb 1
\& my @count :Field :Type(numeric);
\&
\& my @objs :Field :Type(list(My::Class));
.Ve
.PP
The \f(CW\*(C`:Type\*(C'\fR attribute results in type checking code being added to
\&\fIset/combined\fR accessors generated by Object::InsideOut, and will perform
type checking on object initialization parameters processed by the \f(CW\*(C`:Arg\*(C'\fR
attribute.
.PP
Available Types are:
.IP "'scalar'" 4
.IX Item "'scalar'"
Permits anything that is not a reference.
.IP "'numeric'" 4
.IX Item "'numeric'"
Can also be specified as \f(CW\*(C`Num\*(C'\fR or \f(CW\*(C`Number\*(C'\fR.  This uses
\&\fIScalar::Util::looks_like_number()\fR to
test the input value.
.IP "'list' or 'array'" 4
.IX Item "'list' or 'array'"
.PD 0
.IP "'list(_subtype_)' or 'array(_subtype_)'" 4
.IX Item "'list(_subtype_)' or 'array(_subtype_)'"
.PD
This type permits an accessor to accept multiple values (which are then
placed in an array ref) or a single array ref.
.Sp
For object initialization parameters, it permits a single value (which is then
placed in an array ref) or an array ref.
.Sp
When specified, the contents of the resulting array ref are checked against
the specified subtype:
.RS 4
.IP "'scalar'" 4
.IX Item "'scalar'"
Same as for the basic type above.
.IP "'numeric'" 4
.IX Item "'numeric'"
Same as for the basic type above.
.IP "A class name" 4
.IX Item "A class name"
Same as for the basic type below.
.IP "A reference type" 4
.IX Item "A reference type"
Any reference type (in all caps) as returned by \fIref()\fR).
.RE
.RS 4
.RE
.IP "'ARRAY_ref'" 4
.IX Item "'ARRAY_ref'"
.PD 0
.IP "'ARRAY_ref(_subtype_)'" 4
.IX Item "'ARRAY_ref(_subtype_)'"
.PD
This specifies that only a single array reference is permitted.  Can also be
specified as \f(CW\*(C`ARRAYref\*(C'\fR.
.Sp
When specified, the contents of the array ref are checked against the
specified subtype as per the above.
.IP "'\s-1HASH\s0'" 4
.IX Item "'HASH'"
This type permits an accessor to accept multiple \f(CW\*(C`key\ =>\ value\*(C'\fR pairs
(which are then placed in a hash ref) or a single hash ref.
.Sp
For object initialization parameters, only a single ref is permitted.
.IP "'HASH_ref'" 4
.IX Item "'HASH_ref'"
This specifies that only a single hash reference is permitted.  Can also be
specified as \f(CW\*(C`HASHref\*(C'\fR.
.IP "'SCALAR_ref'" 4
.IX Item "'SCALAR_ref'"
This type permits an accessor to accept a single scalar reference.  Can also
be specified as \f(CW\*(C`SCALARref\*(C'\fR.
.IP "A class name" 4
.IX Item "A class name"
This permits only an object of the specified class, or one of its sub-classes
(i.e., type checking is done using \f(CW\*(C`\->isa()\*(C'\fR).  For example,
\&\f(CW\*(C`My::Class\*(C'\fR.  The class name \f(CW\*(C`UNIVERSAL\*(C'\fR permits any object.  The class name
\&\f(CW\*(C`Object::InsideOut\*(C'\fR permits any object generated by an Object::InsideOut
class.
.IP "Other reference type" 4
.IX Item "Other reference type"
This permits only a reference of the specified type (as returned by
\&\fIref()\fR).  The type must be specified in all caps.
For example, \f(CW\*(C`CODE\*(C'\fR.
.PP
The \f(CW\*(C`:Type\*(C'\fR attribute can also be supplied with a code reference to provide
custom type checking.  The code ref may either be in the form of an anonymous
subroutine, or a fully-qualified subroutine name.  The result of executing the
code ref on the input argument should be a boolean value.  Here's some
examples:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     # Type checking using an anonymous subroutine
\&     #  (This checks that the argument is an object)
\&     my @data :Field :Type(sub { Scalar::Util::blessed($_[0]) })
\&                     :Acc(data);
\&
\&     # Type checking using a fully\-qualified subroutine name
\&     my @num  :Field :Type(\e&My::Class::positive)
\&                     :Acc(num);
\&
\&     # The type checking subroutine may be made \*(AqPrivate\*(Aq
\&     sub positive :Private
\&     {
\&         return (Scalar::Util::looks_like_number($_[0]) &&
\&                 ($_[0] > 0));
\&     }
\& }
.Ve
.ie n .SS "Type Checking on "":Init"" Parameters"
.el .SS "Type Checking on \f(CW:Init\fP Parameters"
.IX Subsection "Type Checking on :Init Parameters"
For object initialization parameters that are sent to the \f(CW\*(C`:Init\*(C'\fR subroutine
during object initialization, the parameter's type can be specified in the
\&\f(CW\*(C`:InitArgs\*(C'\fR hash for that parameter using the same types as specified in the
previous section.  For example:
.PP
.Vb 8
\& my %init_args :InitArgs = (
\&     \*(AqCOUNT\*(Aq => {
\&         \*(AqType\*(Aq => \*(Aqnumeric\*(Aq,
\&     },
\&     \*(AqOBJS\*(Aq => {
\&         \*(AqType\*(Aq => \*(Aqlist(My::Class)\*(Aq,
\&     },
\& );
.Ve
.PP
One exception involves custom type checking:  If referenced in an \f(CW\*(C`:InitArgs\*(C'\fR
hash, the type checking subroutine cannot be made \f(CW\*(C`:Private\*(C'\fR:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     sub check_type   # Cannot be :Private
\&     {
\&        ...
\&     }
\&
\&     my %init_args :InitArgs = (
\&         \*(AqARG\*(Aq => {
\&             \*(AqType\*(Aq => \e&check_type,
\&         },
\&     );
\&
\&     ...
\& }
.Ve
.PP
Also, as shown, it also doesn't have to be a fully-qualified name.
.SH "CUMULATIVE METHODS"
.IX Header "CUMULATIVE METHODS"
Normally, methods with the same name in a class hierarchy are masked (i.e.,
overridden) by inheritance \- only the method in the most-derived class is
called.  With cumulative methods, this masking is removed, and the same-named
method is called in each of the classes within the hierarchy.  The return
results from each call (if any) are then gathered together into the return
value for the original method call.  For example,
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     sub what_am_i :Cumulative
\&     {
\&         my $self = shift;
\&
\&         my $ima = (ref($self) eq _\|_PACKAGE_\|_)
\&                     ? q/I was created as a /
\&                     : q/My top class is /;
\&
\&         return ($ima . _\|_PACKAGE_\|_);
\&     }
\& }
\&
\& package My::Foo; {
\&     use Object::InsideOut \*(AqMy::Class\*(Aq;
\&
\&     sub what_am_i :Cumulative
\&     {
\&         my $self = shift;
\&
\&         my $ima = (ref($self) eq _\|_PACKAGE_\|_)
\&                     ? q/I was created as a /
\&                     : q/I\*(Aqm also a /;
\&
\&         return ($ima . _\|_PACKAGE_\|_);
\&     }
\& }
\&
\& package My::Child; {
\&     use Object::InsideOut \*(AqMy::Foo\*(Aq;
\&
\&     sub what_am_i :Cumulative
\&     {
\&         my $self = shift;
\&
\&         my $ima = (ref($self) eq _\|_PACKAGE_\|_)
\&                     ? q/I was created as a /
\&                     : q/I\*(Aqm in class /;
\&
\&         return ($ima . _\|_PACKAGE_\|_);
\&     }
\& }
\&
\& package main;
\&
\& my $obj = My::Child\->new();
\& my @desc = $obj\->what_am_i();
\& print(join("\en", @desc), "\en");
.Ve
.PP
produces:
.PP
.Vb 3
\& My top class is My::Class
\& I\*(Aqm also a My::Foo
\& I was created as a My::Child
.Ve
.PP
When called in a list context (as in the above), the return results of
cumulative methods are accumulated, and returned as a list.
.PP
In a scalar context, a results object is returned that segregates the results
by class for each of the cumulative method calls.  Through overloading, this
object can then be dereferenced as an array, hash, string, number, or boolean.
For example, the above could be rewritten as:
.PP
.Vb 3
\& my $obj = My::Child\->new();
\& my $desc = $obj\->what_am_i();        # Results object
\& print(join("\en", @{$desc}), "\en");   # Dereference as an array
.Ve
.PP
The following uses hash dereferencing:
.PP
.Vb 5
\& my $obj = My::Child\->new();
\& my $desc = $obj\->what_am_i();
\& while (my ($class, $value) = each(%{$desc})) {
\&     print("Class $class reports:\en\et$value\en");
\& }
.Ve
.PP
and produces:
.PP
.Vb 6
\& Class My::Class reports:
\&         My top class is My::Class
\& Class My::Child reports:
\&         I was created as a My::Child
\& Class My::Foo reports:
\&         I\*(Aqm also a My::Foo
.Ve
.PP
As illustrated above, cumulative methods are tagged with the \f(CW\*(C`:Cumulative\*(C'\fR
attribute (or \f(CW\*(C`:Cumulative(top\ down)\*(C'\fR), and propagate from the \fItop down\fR
through the class hierarchy (i.e., from the parent classes down through the
child classes).  If tagged with \f(CW\*(C`:Cumulative(bottom\ up)\*(C'\fR, they will
propagated from the object's class upward through the parent classes.
.SH "CHAINED METHODS"
.IX Header "CHAINED METHODS"
In addition to \f(CW\*(C`:Cumulative\*(C'\fR, Object::InsideOut provides a way of creating
methods that are chained together so that their return values are passed as
input arguments to other similarly named methods in the same class hierarchy.
In this way, the chained methods act as though they were \fIpiped\fR together.
.PP
For example, imagine you had a method called \f(CW\*(C`format_name\*(C'\fR that formats some
text for display:
.PP
.Vb 2
\& package Subscriber; {
\&     use Object::InsideOut;
\&
\&     sub format_name {
\&         my ($self, $name) = @_;
\&
\&         # Strip leading and trailing whitespace
\&         $name =~ s/^\es+//;
\&         $name =~ s/\es+$//;
\&
\&         return ($name);
\&     }
\& }
.Ve
.PP
And elsewhere you have a second class that formats the case of names:
.PP
.Vb 3
\& package Person; {
\&     use Lingua::EN::NameCase qw(nc);
\&     use Object::InsideOut;
\&
\&     sub format_name
\&     {
\&         my ($self, $name) = @_;
\&
\&         # Attempt to properly case names
\&         return (nc($name));
\&     }
\& }
.Ve
.PP
And you decide that you'd like to perform some formatting of your own, and
then have all the parent methods apply their own formatting.  Normally, if you
have a single parent class, you'd just call the method directly with
\&\f(CW\*(C`$self\->SUPER::format_name($name)\*(C'\fR, but if you have more than one parent
class you'd have to explicitly call each method directly:
.PP
.Vb 2
\& package Customer; {
\&     use Object::InsideOut qw(Person Subscriber);
\&
\&     sub format_name
\&     {
\&         my ($self, $name) = @_;
\&
\&         # Compress all whitespace into a single space
\&         $name =~ s/\es+/ /g;
\&
\&         $name = $self\->Subscriber::format_name($name);
\&         $name = $self\->Person::format_name($name);
\&
\&         return $name;
\&     }
\& }
.Ve
.PP
With Object::InsideOut, you'd add the \f(CW\*(C`:Chained\*(C'\fR attribute to each class's
\&\f(CW\*(C`format_name\*(C'\fR method, and the methods will be chained together automatically:
.PP
.Vb 2
\& package Subscriber; {
\&     use Object::InsideOut;
\&
\&     sub format_name :Chained
\&     {
\&         my ($self, $name) = @_;
\&
\&         # Strip leading and trailing whitespace
\&         $name =~ s/^\es+//;
\&         $name =~ s/\es+$//;
\&
\&         return ($name);
\&     }
\& }
\&
\& package Person; {
\&     use Lingua::EN::NameCase qw(nc);
\&     use Object::InsideOut;
\&
\&     sub format_name :Chained
\&     {
\&         my ($self, $name) = @_;
\&
\&         # Attempt to properly case names
\&         return (nc($name));
\&     }
\& }
\&
\& package Customer; {
\&     use Object::InsideOut qw(Person Subscriber);
\&
\&     sub format_name :Chained
\&     {
\&         my ($self, $name) = @_;
\&
\&         # Compress all whitespace into a single space
\&         $name =~ s/\es+/ /g;
\&
\&         return ($name);
\&     }
\& }
.Ve
.PP
So passing in someone's name to \f(CW\*(C`format_name\*(C'\fR in \f(CW\*(C`Customer\*(C'\fR would cause
leading and trailing whitespace to be removed, then the name to be properly
cased, and finally whitespace to be compressed to a single space.  The
resulting \f(CW$name\fR would be returned to the caller:
.PP
.Vb 1
\& my ($name) = $obj\->format_name($name_raw);
.Ve
.PP
Unlike \f(CW\*(C`:Cumulative\*(C'\fR methods, \f(CW\*(C`:Chained\*(C'\fR methods \fBalways\fR returns an array
\&\- even if there is only one value returned.  Therefore, \f(CW\*(C`:Chained\*(C'\fR
methods should always be called in an array context, as illustrated above.
.PP
The default direction is to chain methods from the parent classes at the top
of the class hierarchy down through the child classes.  You may use the
attribute \f(CW\*(C`:Chained(top\ down)\*(C'\fR to make this more explicit.
.PP
If you label the method with the \f(CW\*(C`:Chained(bottom\ up)\*(C'\fR attribute, then the
chained methods are called starting with the object's class and working
upward through the parent classes in the class hierarchy, similar to how
\&\f(CW\*(C`:Cumulative(bottom\ up)\*(C'\fR works.
.SH "ARGUMENT MERGING"
.IX Header "ARGUMENT MERGING"
As mentioned under \*(L"Object Creation\*(R", the \f(CW\*(C`\->new()\*(C'\fR method can take
parameters that are passed in as combinations of \f(CW\*(C`key\ =>\ value\*(C'\fR pairs
and/or hash refs:
.PP
.Vb 11
\& my $obj = My::Class\->new(
\&     \*(Aqparam_X\*(Aq => \*(Aqvalue_X\*(Aq,
\&     \*(Aqparam_Y\*(Aq => \*(Aqvalue_Y\*(Aq,
\&     {
\&         \*(Aqparam_A\*(Aq => \*(Aqvalue_A\*(Aq,
\&         \*(Aqparam_B\*(Aq => \*(Aqvalue_B\*(Aq,
\&     },
\&     {
\&         \*(Aqparam_Q\*(Aq => \*(Aqvalue_Q\*(Aq,
\&     },
\& );
.Ve
.PP
The parameters are \fImerged\fR into a single hash ref before they are processed.
.PP
Adding the \f(CW\*(C`:MergeArgs\*(C'\fR attribute to your methods gives them a similar
capability.  Your method will then get two arguments:  The object and a single
hash ref of the \fImerged\fR arguments.  For example:
.PP
.Vb 2
\& package Foo; {
\&     use Object::InsideOut;
\&
\&     ...
\&
\&     sub my_method :MergeArgs {
\&         my ($self, $args) = @_;
\&
\&         my $param = $args\->{\*(Aqparam\*(Aq};
\&         my $data  = $args\->{\*(Aqdata\*(Aq};
\&         my $flag  = $args\->{\*(Aqflag\*(Aq};
\&         ...
\&     }
\& }
\&
\& package main;
\&
\& my $obj = Foo\->new(...);
\&
\& $obj\->my_method( { \*(Aqdata\*(Aq => 42,
\&                    \*(Aqflag\*(Aq => \*(Aqtrue\*(Aq },
\&                  \*(Aqparam\*(Aq => \*(Aqfoo\*(Aq );
.Ve
.SH "ARGUMENT VALIDATION"
.IX Header "ARGUMENT VALIDATION"
A number of users have asked about argument validation for methods:
<http://www.cpanforum.com/threads/3204>.  For this, I recommend using
Params::Validate:
.PP
.Vb 3
\& package Foo; {
\&     use Object::InsideOut;
\&     use Params::Validate \*(Aq:all\*(Aq;
\&
\&     sub foo
\&     {
\&         my $self = shift;
\&         my %args = validate(@_, { bar => 1 });
\&         my $bar = $args{bar};
\&         ...
\&     }
\& }
.Ve
.PP
Using Attribute::Params::Validate, attributes are used for argument
validation specifications:
.PP
.Vb 3
\& package Foo; {
\&     use Object::InsideOut;
\&     use Attribute::Params::Validate;
\&
\&     sub foo :method :Validate(bar => 1)
\&     {
\&         my $self = shift;
\&         my %args = @_;
\&         my $bar = $args{bar};
\&         ...
\&     }
\& }
.Ve
.PP
Note that in the above, Perl's \f(CW\*(C`:method\*(C'\fR attribute (in all lowercase) is
needed.
.PP
There is some incompatibility between Attribute::Params::Validate and some of
Object::InsideOut's attributes.  Namely, you cannot use \f(CW\*(C`:Validate\*(C'\fR with
\&\f(CW\*(C`:Private\*(C'\fR, \f(CW\*(C`:Restricted\*(C'\fR, \f(CW\*(C`:Cumulative\*(C'\fR, \f(CW\*(C`:Chained\*(C'\fR or \f(CW\*(C`:MergeArgs\*(C'\fR.
In these cases, use the \f(CW\*(C`validate()\*(C'\fR function from Params::Validate
instead.
.SH "AUTOMETHODS"
.IX Header "AUTOMETHODS"
There are significant issues related to Perl's \f(CW\*(C`AUTOLOAD\*(C'\fR mechanism that
cause it to be ill-suited for use in a class hierarchy. Therefore,
Object::InsideOut implements its own \f(CW\*(C`:Automethod\*(C'\fR mechanism to overcome
these problems.
.PP
Classes requiring \f(CW\*(C`AUTOLOAD\*(C'\fR\-type capabilities must provided a subroutine
labeled with the \f(CW\*(C`:Automethod\*(C'\fR attribute.  The \f(CW\*(C`:Automethod\*(C'\fR subroutine
will be called with the object and the arguments in the original method call
(the same as for \f(CW\*(C`AUTOLOAD\*(C'\fR).  The \f(CW\*(C`:Automethod\*(C'\fR subroutine should return
either a subroutine reference that implements the requested method's
functionality, or else just end with \f(CW\*(C`return;\*(C'\fR to indicate that it doesn't
know how to handle the request.
.PP
Using its own \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine (which is exported to every class),
Object::InsideOut walks through the class tree, calling each \f(CW\*(C`:Automethod\*(C'\fR
subroutine, as needed, to fulfill an unimplemented method call.
.PP
The name of the method being called is passed as \f(CW$_\fR instead of
\&\f(CW$AUTOLOAD\fR, and is \fInot\fR prefixed with the class name.  If the
\&\f(CW\*(C`:Automethod\*(C'\fR subroutine also needs to access the \f(CW$_\fR from the caller's
scope, it is available as \f(CW$CALLER::_\fR.
.PP
Automethods can also be made to act as \*(L"\s-1CUMULATIVE\s0 \s-1METHODS\s0\*(R" or \*(L"\s-1CHAINED\s0
\&\s-1METHODS\s0\*(R".  In these cases, the \f(CW\*(C`:Automethod\*(C'\fR subroutine should return two
values: The subroutine ref to handle the method call, and a string designating
the type of method.  The designator has the same form as the attributes used
to designate \f(CW\*(C`:Cumulative\*(C'\fR and \f(CW\*(C`:Chained\*(C'\fR methods:
.PP
.Vb 4
\& \*(Aq:Cumulative\*(Aq  or  \*(Aq:Cumulative(top down)\*(Aq
\& \*(Aq:Cumulative(bottom up)\*(Aq
\& \*(Aq:Chained\*(Aq     or  \*(Aq:Chained(top down)\*(Aq
\& \*(Aq:Chained(bottom up)\*(Aq
.Ve
.PP
The following skeletal code illustrates how an \f(CW\*(C`:Automethod\*(C'\fR subroutine could
be structured:
.PP
.Vb 4
\& sub _automethod :Automethod
\& {
\&     my $self = shift;
\&     my @args = @_;
\&
\&     my $method_name = $_;
\&
\&     # This class can handle the method directly
\&     if (...) {
\&         my $handler = sub {
\&             my $self = shift;
\&             ...
\&             return ...;
\&         };
\&
\&         ### OPTIONAL ###
\&         # Install the handler so it gets called directly next time
\&         # no strict refs;
\&         # *{_\|_PACKAGE_\|_.\*(Aq::\*(Aq.$method_name} = $handler;
\&         ################
\&
\&         return ($handler);
\&     }
\&
\&     # This class can handle the method as part of a chain
\&     if (...) {
\&         my $chained_handler = sub {
\&             my $self = shift;
\&             ...
\&             return ...;
\&         };
\&
\&         return ($chained_handler, \*(Aq:Chained\*(Aq);
\&     }
\&
\&     # This class cannot handle the method request
\&     return;
\& }
.Ve
.PP
Note: The \fI\s-1OPTIONAL\s0\fR code above for installing the generated handler as a
method should not be used with \f(CW\*(C`:Cumulative\*(C'\fR or \f(CW\*(C`:Chained\*(C'\fR automethods.
.SH "OBJECT SERIALIZATION"
.IX Header "OBJECT SERIALIZATION"
.SS "Basic Serialization"
.IX Subsection "Basic Serialization"
.ie n .IP "my $array_ref = $obj\->\fIdump()\fR;" 4
.el .IP "my \f(CW$array_ref\fR = \f(CW$obj\fR\->\fIdump()\fR;" 4
.IX Item "my $array_ref = $obj->dump();"
.PD 0
.ie n .IP "my $string = $obj\->\fIdump\fR\|(1);" 4
.el .IP "my \f(CW$string\fR = \f(CW$obj\fR\->\fIdump\fR\|(1);" 4
.IX Item "my $string = $obj->dump;"
.PD
Object::InsideOut exports a method called \f(CW\*(C`\->dump()\*(C'\fR to each class that
returns either a \fIPerl\fR or a string representation of the object that invokes
the method.
.Sp
The \fIPerl\fR representation is returned when \f(CW\*(C`\->dump()\*(C'\fR is called without
arguments.  It consists of an array ref whose first element is the name of the
object's class, and whose second element is a hash ref containing the object's
data.  The object data hash ref contains keys for each of the classes that make
up the object's hierarchy. The values for those keys are hash refs containing
\&\f(CW\*(C`key\ =>\ value\*(C'\fR pairs for the object's fields.  For example:
.Sp
.Vb 11
\& [
\&   \*(AqMy::Class::Sub\*(Aq,
\&   {
\&     \*(AqMy::Class\*(Aq => {
\&                      \*(Aqdata\*(Aq => \*(Aqvalue\*(Aq
\&                    },
\&     \*(AqMy::Class::Sub\*(Aq => {
\&                           \*(Aqlife\*(Aq => 42
\&                         }
\&   }
\& ]
.Ve
.Sp
The name for an object field (\fIdata\fR and \fIlife\fR in the example above) can be
specified by adding the \f(CW\*(C`:Name\*(C'\fR attribute to the field:
.Sp
.Vb 1
\& my @life :Field :Name(life);
.Ve
.Sp
If the \f(CW\*(C`:Name\*(C'\fR attribute is not used, then the name for a field will be
either the name associated with an \f(CW\*(C`:All\*(C'\fR or \f(CW\*(C`:Arg\*(C'\fR attribute, its \fIget\fR
method name, its \fIset\fR method name, or, failing all that, a string of the
form \f(CW\*(C`ARRAY(0x...)\*(C'\fR or \f(CW\*(C`HASH(0x...)\*(C'\fR.
.Sp
When called with a \fItrue\fR argument, \f(CW\*(C`\->dump()\*(C'\fR returns a string version
of the \fIPerl\fR representation using Data::Dumper.
.Sp
Note that using Data::Dumper directly on an inside-out object will not
produce the desired results (it'll just output the contents of the scalar
ref).  Also, if inside-out objects are stored inside other structures, a dump
of those structures will not contain the contents of the object's fields.
.Sp
In the event of a method naming conflict, the \f(CW\*(C`\->dump()\*(C'\fR method can be
called using its fully-qualified name:
.Sp
.Vb 1
\& my $dump = $obj\->Object::InsideOut::dump();
.Ve
.ie n .IP "my $obj = Object::InsideOut\->pump($data);" 4
.el .IP "my \f(CW$obj\fR = Object::InsideOut\->pump($data);" 4
.IX Item "my $obj = Object::InsideOut->pump($data);"
\&\f(CW\*(C`Object::InsideOut\->pump()\*(C'\fR takes the output from the \f(CW\*(C`\->dump()\*(C'\fR
method, and returns an object that is created using that data.  If \f(CW$data\fR is
the array ref returned by using \f(CW\*(C`$obj\->dump()\*(C'\fR, then the data is inserted
directly into the corresponding fields for each class in the object's class
hierarchy.  If \f(CW$data\fR is the string returned by using \f(CW\*(C`$obj\->dump(1)\*(C'\fR,
then it is \f(CW\*(C`eval\*(C'\fRed to turn it into an array ref, and then processed as
above.
.Sp
\&\fBCaveats\fR:
If any of an object's fields are dumped to field name keys of the form
\&\f(CW\*(C`ARRAY(0x...)\*(C'\fR or \f(CW\*(C`HASH(0x...)\*(C'\fR (see above), then the data will not be
reloadable using \f(CW\*(C`Object::InsideOut\->pump()\*(C'\fR.  To overcome this problem,
the class developer must either add \f(CW\*(C`:Name\*(C'\fR attributes to the \f(CW\*(C`:Field\*(C'\fR
declarations (see above), or provide a \f(CW\*(C`:Dumper\*(C'\fR/\f(CW\*(C`:Pumper\*(C'\fR pair of
subroutines as described below.
.Sp
Dynamically altering a class (e.g., using
\&\->\fIcreate_field()\fR) after objects have been
dumped will result in \f(CW\*(C`undef\*(C'\fR fields when pumped back in regardless of
whether or not the added fields have defaults.
.Sp
Modifying the output from \f(CW\*(C`\->dump()\*(C'\fR, and then feeding it into
\&\f(CW\*(C`Object::InsideOut\->pump()\*(C'\fR will work, but is not specifically
supported.  If you know what you're doing, fine, but you're on your own.
.ie n .IP """:Dumper"" Subroutine Attribute" 4
.el .IP "\f(CW:Dumper\fR Subroutine Attribute" 4
.IX Item ":Dumper Subroutine Attribute"
If a class requires special processing to dump its data, then it can provide a
subroutine labeled with the \f(CW\*(C`:Dumper\*(C'\fR attribute.  This subroutine will be
sent the object that is being dumped.  It may then return any type of scalar
the developer deems appropriate.  Usually, this would be a hash ref containing
\&\f(CW\*(C`key\ =>\ value\*(C'\fR pairs for the object's fields.  For example:
.Sp
.Vb 1
\& my @data :Field;
\&
\& sub _dump :Dumper
\& {
\&     my $obj = $_[0];
\&
\&     my %field_data;
\&     $field_data{\*(Aqdata\*(Aq} = $data[$$obj];
\&
\&     return (\e%field_data);
\& }
.Ve
.Sp
Just be sure not to call your \f(CW\*(C`:Dumper\*(C'\fR subroutine \f(CW\*(C`dump\*(C'\fR as that is the
name of the dump method exported by Object::InsideOut as explained above.
.ie n .IP """:Pumper"" Subroutine Attribute" 4
.el .IP "\f(CW:Pumper\fR Subroutine Attribute" 4
.IX Item ":Pumper Subroutine Attribute"
If a class supplies a \f(CW\*(C`:Dumper\*(C'\fR subroutine, it will most likely need to
provide a complementary \f(CW\*(C`:Pumper\*(C'\fR labeled subroutine that will be used as
part of creating an object from dumped data using
\&\f(CW\*(C`Object::InsideOut\->pump()\*(C'\fR.  The subroutine will be supplied the new
object that is being created, and whatever scalar was returned by the
\&\f(CW\*(C`:Dumper\*(C'\fR subroutine.  The corresponding \f(CW\*(C`:Pumper\*(C'\fR for the example
\&\f(CW\*(C`:Dumper\*(C'\fR above would be:
.Sp
.Vb 3
\& sub _pump :Pumper
\& {
\&     my ($obj, $field_data) = @_;
\&
\&     $obj\->set(\e@data, $field_data\->{\*(Aqdata\*(Aq});
\& }
.Ve
.SS "Storable"
.IX Subsection "Storable"
Object::InsideOut also supports object serialization using the Storable
module.  There are two methods for specifying that a class can be serialized
using Storable.  The first method involves adding Storable to the
Object::InsideOut declaration in your package:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut qw(Storable);
\&     ...
\& }
.Ve
.PP
and adding \f(CW\*(C`use\ Storable;\*(C'\fR in your application.  Then you can use the
\&\f(CW\*(C`\->store()\*(C'\fR and \f(CW\*(C`\->freeze()\*(C'\fR methods to serialize your objects, and
the \f(CW\*(C`retrieve()\*(C'\fR and \f(CW\*(C`thaw()\*(C'\fR subroutines to de-serialize them.
.PP
.Vb 3
\& package main;
\& use Storable;
\& use My::Class;
\&
\& my $obj = My::Class\->new(...);
\& $obj\->store(\*(Aq/tmp/object.dat\*(Aq);
\& ...
\& my $obj2 = retrieve(\*(Aq/tmp/object.dat\*(Aq);
.Ve
.PP
The other method of specifying Storable serialization involves setting a
\&\f(CW\*(C`::storable\*(C'\fR variable inside a \f(CW\*(C`BEGIN\*(C'\fR block for the class prior to its
use:
.PP
.Vb 2
\& package main;
\& use Storable;
\&
\& BEGIN {
\&     $My::Class::storable = 1;
\& }
\& use My::Class;
.Ve
.PP
\&\s-1NOTE:\s0 The \fIcaveats\fR discussed above for the \f(CW\*(C`\->pump()\*(C'\fR method are also
applicable when using the Storable module.
.SH "OBJECT COERCION"
.IX Header "OBJECT COERCION"
Object::InsideOut provides support for various forms of object coercion
through the overload mechanism.  For instance, if you want an object to be
usable directly in a string, you would supply a subroutine in your class
labeled with the \f(CW\*(C`:Stringify\*(C'\fR attribute:
.PP
.Vb 6
\& sub as_string :Stringify
\& {
\&     my $self = $_[0];
\&     my $string = ...;
\&     return ($string);
\& }
.Ve
.PP
Then you could do things like:
.PP
.Vb 1
\& print("The object says, \*(Aq$obj\*(Aq\en");
.Ve
.PP
For a boolean context, you would supply:
.PP
.Vb 6
\& sub as_bool :Boolify
\& {
\&     my $self = $_[0];
\&     my $true_or_false = ...;
\&     return ($true_or_false);
\& }
.Ve
.PP
and use it in this manner:
.PP
.Vb 3
\& if (! defined($obj)) {
\&     # The object is undefined
\&     ....
\&
\& } elsif (! $obj) {
\&     # The object returned a false value
\&     ...
\& }
.Ve
.PP
The following coercion attributes are supported:
.IP ":Stringify" 4
.IX Item ":Stringify"
.PD 0
.IP ":Numerify" 4
.IX Item ":Numerify"
.IP ":Boolify" 4
.IX Item ":Boolify"
.IP ":Arrayify" 4
.IX Item ":Arrayify"
.IP ":Hashify" 4
.IX Item ":Hashify"
.IP ":Globify" 4
.IX Item ":Globify"
.IP ":Codify" 4
.IX Item ":Codify"
.PD
.PP
Coercing an object to a scalar (\f(CW\*(C`:Scalarify\*(C'\fR) is \fBnot\fR supported as \f(CW$$obj\fR
is the \s-1ID\s0 of the object and cannot be overridden.
.SH "CLONING"
.IX Header "CLONING"
.SS "Object Cloning"
.IX Subsection "Object Cloning"
Copies of objects can be created using the \f(CW\*(C`\->clone()\*(C'\fR method which is
exported by Object::InsideOut to each class:
.PP
.Vb 1
\& my $obj2 = $obj\->clone();
.Ve
.PP
When called without arguments, \f(CW\*(C`\->clone()\*(C'\fR creates a \fIshallow\fR copy of
the object, meaning that any complex data structures (i.e., array, hash or
scalar refs) stored in the object will be shared with its clone.
.PP
Calling \f(CW\*(C`\->clone()\*(C'\fR with a \fItrue\fR argument:
.PP
.Vb 1
\& my $obj2 = $obj\->clone(1);
.Ve
.PP
creates a \fIdeep\fR copy of the object such that internally held array, hash
or scalar refs are \fIreplicated\fR and stored in the newly created clone.
.PP
\&\fIDeep\fR cloning can also be controlled at the field level, and is covered in
the next section.
.PP
Note that cloning does not clone internally held objects.  For example, if
\&\f(CW$foo\fR contains a reference to \f(CW$bar\fR, a clone of \f(CW$foo\fR will also contain
a reference to \f(CW$bar\fR; not a clone of \f(CW$bar\fR.  If such behavior is needed,
it must be provided using a :Replicate subroutine.
.SS "Field Cloning"
.IX Subsection "Field Cloning"
Object cloning can be controlled at the field level such that specified
fields are \fIdeeply\fR copied when \f(CW\*(C`\->clone()\*(C'\fR is called without any
arguments.  This is done by adding the \f(CW\*(C`:Deep\*(C'\fR attribute to the field:
.PP
.Vb 1
\& my @data :Field :Deep;
.Ve
.SH "WEAK FIELDS"
.IX Header "WEAK FIELDS"
Frequently, it is useful to store weakened
references to data or objects in a field.  Such a field can be declared as
\&\f(CW\*(C`:Weak\*(C'\fR so that data (i.e., references) set via Object::InsideOut generated
accessors, parameter processing using \f(CW\*(C`:Arg\*(C'\fR, the \f(CW\*(C`\->set()\*(C'\fR method,
etc., will automatically be weakened after being
stored in the field array/hash.
.PP
.Vb 1
\& my @data :Field :Weak;
.Ve
.PP
\&\s-1NOTE:\s0 If data in a \fIweak\fR field is set directly (i.e., the \f(CW\*(C`\->set()\*(C'\fR
method is not used), then \fIweaken()\fR must be
invoked on the stored reference afterwards:
.PP
.Vb 2
\& $self\->set(\e@field, $data);
\& Scalar::Util::weaken($field[$$self]);
.Ve
.PP
(This is another reason why the \f(CW\*(C`\->set()\*(C'\fR method is recommended for
setting field data within class code.)
.SH "DYNAMIC FIELD CREATION"
.IX Header "DYNAMIC FIELD CREATION"
Normally, object fields are declared as part of the class code.  However,
some classes may need the capability to create object fields \fIon-the-fly\fR,
for example, as part of an \f(CW\*(C`:Automethod\*(C'\fR.  Object::InsideOut provides a class
method for this:
.PP
.Vb 2
\& # Dynamically create a hash field with standard accessors
\& My::Class\->create_field(\*(Aq%\*(Aq.$fld, ":Std($fld)");
.Ve
.PP
The first argument is the class into which the field will be added.  The
second argument is a string containing the name of the field preceded by
either a \f(CW\*(C`@\*(C'\fR or \f(CW\*(C`%\*(C'\fR to declare an array field or hash field, respectively.
The remaining string arguments should be attributes declaring accessors and
the like.  The \f(CW\*(C`:Field\*(C'\fR attribute is assumed, and does not need to be added
to the attribute list.  For example:
.PP
.Vb 2
\& My::Class\->create_field(\*(Aq@data\*(Aq, ":Type(numeric)",
\&                                  ":Acc(data)");
\&
\& My::Class\->create_field(\*(Aq@obj\*(Aq, ":Type(Some::Class)",
\&                                 ":Acc(obj)",
\&                                 ":Weak");
.Ve
.PP
Field creation will fail if you try to create an array field within a class
whose hierarchy has been declared :hash_only.
.PP
Here's an example of an \f(CW\*(C`:Automethod\*(C'\fR subroutine that uses dynamic field
creation:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     sub _automethod :Automethod
\&     {
\&         my $self = $_[0];
\&         my $class = ref($self) || $self;
\&         my $method = $_;
\&
\&         # Extract desired field name from get_/set_ method name
\&         my ($fld_name) = $method =~ /^[gs]et_(.*)$/;
\&         if (! $fld_name) {
\&             return;    # Not a recognized method
\&         }
\&
\&         # Create the field and its standard accessors
\&         $class\->create_field(\*(Aq@\*(Aq.$fld_name, ":Std($fld_name)");
\&
\&         # Return code ref for newly created accessor
\&         no strict \*(Aqrefs\*(Aq;
\&         return *{$class.\*(Aq::\*(Aq.$method}{\*(AqCODE\*(Aq};
\&     }
\& }
.Ve
.SH "RUNTIME INHERITANCE"
.IX Header "RUNTIME INHERITANCE"
The class method \f(CW\*(C`\->add_class()\*(C'\fR provides the capability to dynamically
add classes to a class hierarchy at runtime.
.PP
For example, suppose you had a simple \fIstate\fR class:
.PP
.Vb 2
\& package Trait::State; {
\&     use Object::InsideOut;
\&
\&     my %state :Field :Set(state);
\& }
.Ve
.PP
This could be added to another class at runtime using:
.PP
.Vb 1
\& My::Class\->add_class(\*(AqTrait::State\*(Aq);
.Ve
.PP
This permits, for example, application code to dynamically modify a class
without having it create an actual sub-class.
.SH "PREPROCESSING"
.IX Header "PREPROCESSING"
.SS "Parameter Preprocessing"
.IX Subsection "Parameter Preprocessing"
You can specify a code ref (either in the form of an anonymous subroutine, or
a subroutine name) for an object initialization parameter that will be called
on that parameter prior to taking any of the other parameter actions described
above.  Here's an example:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     # The parameter preprocessing subroutine
\&     sub preproc
\&     {
\&         my ($class, $param, $spec, $obj, $value) = @_;
\&
\&         # Preform parameter preprocessing
\&         ...
\&
\&         # Return result
\&         return ...;
\&     }
\&
\&     my @data :Field
\&              :Arg(\*(AqName\*(Aq => \*(AqDATA\*(Aq, \*(AqPreprocess\*(Aq => \e&My::Class::preproc);
\&
\&     my %init_args :InitArgs = (
\&         \*(AqPARAM\*(Aq => {
\&             \*(AqPreprocess\*(Aq => \e&preproc,
\&         },
\&     );
\&
\&     ...
\& }
.Ve
.PP
When used in the \f(CW\*(C`:Arg\*(C'\fR attribute, the subroutine name must be
fully-qualified, as illustrated.  Further, if not referenced in the
\&\f(CW\*(C`:InitArgs\*(C'\fR hash, the preprocessing subroutine can be given the \f(CW\*(C`:Private\*(C'\fR
attribute.
.PP
As the above illustrates, the parameter preprocessing subroutine is sent five
arguments:
.IP "\(bu" 4
The name of the class associated with the parameter
.Sp
This would be \f(CW\*(C`My::Class\*(C'\fR in the example above.
.IP "\(bu" 4
The name of the parameter
.Sp
Either \f(CW\*(C`DATA\*(C'\fR or \f(CW\*(C`PARAM\*(C'\fR in the example above.
.IP "\(bu" 4
A hash ref of the parameter's specifiers
.Sp
This is either a hash ref containing the \f(CW\*(C`:Arg\*(C'\fR attribute parameters, or the
hash ref paired to the parameter's key in the \f(CW\*(C`:InitArgs\*(C'\fR hash.
.IP "\(bu" 4
The object being initialized
.IP "\(bu" 4
The parameter's value
.Sp
This is the value assigned to the parameter in the \f(CW\*(C`\->new()\*(C'\fR method's
argument list.  If the parameter was not provided to \f(CW\*(C`\->new()\*(C'\fR, then
\&\f(CW\*(C`undef\*(C'\fR will be sent.
.PP
The return value of the preprocessing subroutine will then be assigned to the
parameter.
.PP
Be careful about what types of data the preprocessing subroutine tries to make
use of \f(CW\*(C`external\*(C'\fR to the arguments supplied.  For instance, because the order
of parameter processing is not specified, the preprocessing subroutine cannot
rely on whether or not some other parameter is set.  Such processing would
need to be done in the \f(CW\*(C`:Init\*(C'\fR subroutine.  It can, however, make use of
object data set by classes \fIhigher up\fR in the class hierarchy.  (That is why
the object is provided as one of the arguments.)
.PP
Possible uses for parameter preprocessing include:
.IP "\(bu" 4
Overriding the supplied value (or even deleting it by returning \f(CW\*(C`undef\*(C'\fR)
.IP "\(bu" 4
Providing a dynamically-determined default value
.PP
\&\fIPreprocess\fR may be abbreviated to \fIPreproc\fR or \fIPre\fR.
.SS "\fISet\fP Accessor Preprocessing"
.IX Subsection "Set Accessor Preprocessing"
You can specify a code ref (either in the form of an anonymous subroutine, or
a fully-qualified subroutine name) for a \fIset/combined\fR accessor that will be
called on the arguments supplied to the accessor prior to its taking the usual
actions of type checking and adding the data to the field.  Here's an example:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     my @data :Field
\&              :Acc(\*(AqName\*(Aq => \*(Aqdata\*(Aq, \*(AqPreprocess\*(Aq => \e&My::Class::preproc);
\&
\&     # The set accessor preprocessing subroutine may be made \*(AqPrivate\*(Aq
\&     sub preproc :Private
\&     {
\&         my ($self, $field, @args) = @_;
\&
\&         # Preform preprocessing on the accessor\*(Aqs arguments
\&         ...
\&
\&         # Return result
\&         return ...;
\&     }
\& }
.Ve
.PP
As the above illustrates, the accessor preprocessing subroutine is sent the
following arguments:
.IP "\(bu" 4
The object used to invoke the accessor
.IP "\(bu" 4
A reference to the field associated with the accessor
.IP "\(bu" 4
The argument(s) sent to the accessor
.Sp
There will always be at least one argument.
.PP
Usually, the preprocessing subroutine would return just a single value.  For
fields declared as type \f(CW\*(C`List\*(C'\fR, multiple values may be returned.
.PP
Following preprocessing, the \fIset\fR accessor will operate on whatever value(s)
are returned by the preprocessing subroutine.
.SH "SPECIAL PROCESSING"
.IX Header "SPECIAL PROCESSING"
.SS "Object \s-1ID\s0"
.IX Subsection "Object ID"
By default, the \s-1ID\s0 of an object is derived from a sequence counter for the
object's class hierarchy.  This should suffice for nearly all cases of class
development.  If there is a special need for the module code to control the
object \s-1ID\s0 (see Math::Random::MT::Auto as an example), then a
subroutine labelled with the \f(CW\*(C`:ID\*(C'\fR attribute can be specified:
.PP
.Vb 3
\& sub _id :ID
\& {
\&     my $class = $_[0];
\&
\&     # Generate/determine a unique object ID
\&     ...
\&
\&     return ($id);
\& }
.Ve
.PP
The \s-1ID\s0 returned by your subroutine can be any kind of \fIregular\fR scalar (e.g.,
a string or a number).  However, if the \s-1ID\s0 is something other than a
low-valued integer, then you will have to architect \fBall\fR your classes using
hashes for the object fields.  See \*(L"\s-1HASH\s0 \s-1ONLY\s0 \s-1CLASSES\s0\*(R" for details.
.PP
Within any class hierarchy, only one class may specify an \f(CW\*(C`:ID\*(C'\fR subroutine.
.SS "Object Replication"
.IX Subsection "Object Replication"
Object replication occurs explicitly when the \f(CW\*(C`\->clone()\*(C'\fR method is
called on an object, and implicitly when threads are created in a threaded
application.  In nearly all cases, Object::InsideOut will take care of all the
details for you.
.PP
In rare cases, a class may require special handling for object replication.
It must then provide a subroutine labeled with the \f(CW\*(C`:Replicate\*(C'\fR attribute.
This subroutine will be sent three arguments:  The parent and the cloned
objects, and a flag:
.PP
.Vb 3
\& sub _replicate :Replicate
\& {
\&     my ($parent, $clone, $flag) = @_;
\&
\&     # Special object replication processing
\&     if ($clone eq \*(AqCLONE\*(Aq) {
\&        # Handling for thread cloning
\&        ...
\&     } elsif ($clone eq \*(Aqdeep\*(Aq) {
\&        # Deep copy of the parent
\&        ...
\&     } else {
\&        # Shallow copying
\&        ...
\&     }
\& }
.Ve
.PP
In the case of thread cloning, \f(CW$flag\fR will be set to the \f(CW\*(AqCLONE\*(Aq\fR, and the
\&\f(CW$parent\fR object is just a non-blessed anonymous scalar reference that
contains the \s-1ID\s0 for the object in the parent thread.
.PP
When invoked via the \f(CW\*(C`\->clone()\*(C'\fR method, \f(CW$flag\fR will be either an empty
string which denotes that a \fIshallow\fR copy is being produced for the clone,
or \f(CW$flag\fR will be set to \f(CW\*(Aqdeep\*(Aq\fR indicating a \fIdeep\fR copy is being
produced.
.PP
The \f(CW\*(C`:Replicate\*(C'\fR subroutine only needs to deal with the special replication
processing needed by the object:  Object::InsideOut will handle all the other
details.
.SS "Object Destruction"
.IX Subsection "Object Destruction"
Object::InsideOut exports a \f(CW\*(C`DESTROY\*(C'\fR method to each class that deletes an
object's data from the object field arrays (hashes).  If a class requires
additional destruction processing (e.g., closing filehandles), then it must
provide a subroutine labeled with the \f(CW\*(C`:Destroy\*(C'\fR attribute.  This subroutine
will be sent the object that is being destroyed:
.PP
.Vb 3
\& sub _destroy :Destroy
\& {
\&     my $obj = $_[0];
\&
\&     # Special object destruction processing
\& }
.Ve
.PP
The \f(CW\*(C`:Destroy\*(C'\fR subroutine only needs to deal with the special destruction
processing:  The \f(CW\*(C`DESTROY\*(C'\fR method will handle all the other details of object
destruction.
.SH "FOREIGN CLASS INHERITANCE"
.IX Header "FOREIGN CLASS INHERITANCE"
Object::InsideOut supports inheritance from foreign (i.e.,
non\-Object::InsideOut) classes.  This means that your classes can inherit from
other Perl class, and access their methods from your own objects.
.PP
One method of declaring foreign class inheritance is to add the class name to
the Object::InsideOut declaration inside your package:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut qw(Foreign::Class);
\&     ...
\& }
.Ve
.PP
This allows you to access the foreign class's static (i.e., class) methods
from your own class.  For example, suppose \f(CW\*(C`Foreign::Class\*(C'\fR has a class
method called \f(CW\*(C`foo\*(C'\fR.  With the above, you can access that method using
\&\f(CW\*(C`My::Class\->foo()\*(C'\fR instead.
.PP
Multiple foreign inheritance is supported, as well:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut qw(Foreign::Class Other::Foreign::Class);
\&     ...
\& }
.Ve
.ie n .IP "$self\->inherit($obj, ...);" 4
.el .IP "\f(CW$self\fR\->inherit($obj, ...);" 4
.IX Item "$self->inherit($obj, ...);"
To use object methods from foreign classes, an object must \fIinherit\fR from an
object of that class.  This would normally be done inside a class's \f(CW\*(C`:Init\*(C'\fR
subroutine:
.Sp
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut qw(Foreign::Class);
\&
\&     sub init :Init
\&     {
\&         my ($self, $args) = @_;
\&
\&         my $foreign_obj = Foreign::Class\->new(...);
\&         $self\->inherit($foreign_obj);
\&     }
\& }
.Ve
.Sp
Thus, with the above, if \f(CW\*(C`Foreign::Class\*(C'\fR has an object method called \f(CW\*(C`bar\*(C'\fR,
you can call that method from your own objects:
.Sp
.Vb 1
\& package main;
\&
\& my $obj = My::Class\->new();
\& $obj\->bar();
.Ve
.Sp
Object::InsideOut's \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine handles the dispatching of the
\&\f(CW\*(C`\->bar()\*(C'\fR method call using the internally held inherited object (in this
case, \f(CW$foreign_obj\fR).
.Sp
Multiple inheritance is supported, as well:  You can call the
\&\f(CW\*(C`\->inherit()\*(C'\fR method multiple times, or make just one call with all the
objects to be inherited from.
.Sp
\&\f(CW\*(C`\->inherit()\*(C'\fR is a restricted method.  In other words, you cannot use it
on an object outside of code belonging to the object's class tree (e.g., you
can't call it from application code).
.Sp
In the event of a method naming conflict, the \f(CW\*(C`\->inherit()\*(C'\fR method can be
called using its fully-qualified name:
.Sp
.Vb 1
\& $self\->Object::InsideOut::inherit($obj);
.Ve
.ie n .IP "my @objs = $self\->\fIheritage()\fR;" 4
.el .IP "my \f(CW@objs\fR = \f(CW$self\fR\->\fIheritage()\fR;" 4
.IX Item "my @objs = $self->heritage();"
.PD 0
.ie n .IP "my $obj = $self\->heritage($class);" 4
.el .IP "my \f(CW$obj\fR = \f(CW$self\fR\->heritage($class);" 4
.IX Item "my $obj = $self->heritage($class);"
.ie n .IP "my @objs = $self\->heritage($class1, $class2, ...);" 4
.el .IP "my \f(CW@objs\fR = \f(CW$self\fR\->heritage($class1, \f(CW$class2\fR, ...);" 4
.IX Item "my @objs = $self->heritage($class1, $class2, ...);"
.PD
Your class code can retrieve any inherited objects using the
\&\f(CW\*(C`\->heritage()\*(C'\fR method. When called without any arguments, it returns a
list of any objects that were stored by the calling class using the calling
object.  In other words, if class \f(CW\*(C`My::Class\*(C'\fR uses object \f(CW$obj\fR to store
foreign objects \f(CW$fobj1\fR and \f(CW$fobj2\fR, then later on in class \f(CW\*(C`My::Class\*(C'\fR,
\&\f(CW\*(C`$obj\->heritage()\*(C'\fR will return \f(CW$fobj1\fR and \f(CW$fobj2\fR.
.Sp
\&\f(CW\*(C`\->heritage()\*(C'\fR can also be called with one or more class name arguments.
In this case, only objects of the specified class(es) are returned.
.Sp
In the event of a method naming conflict, the \f(CW\*(C`\->heritage()\*(C'\fR method can
be called using its fully-qualified name:
.Sp
.Vb 1
\& my @objs = $self\->Object::InsideOut::heritage();
.Ve
.ie n .IP "$self\->disinherit($class [, ...])" 4
.el .IP "\f(CW$self\fR\->disinherit($class [, ...])" 4
.IX Item "$self->disinherit($class [, ...])"
.PD 0
.ie n .IP "$self\->disinherit($obj [, ...])" 4
.el .IP "\f(CW$self\fR\->disinherit($obj [, ...])" 4
.IX Item "$self->disinherit($obj [, ...])"
.PD
The \f(CW\*(C`\->disinherit()\*(C'\fR method disassociates (i.e., deletes) the inheritance
of foreign object(s) from an object.  The foreign objects may be specified by
class, or using the actual inherited object (retrieved via \f(CW\*(C`\->heritage()\*(C'\fR,
for example).
.Sp
The call is only effective when called inside the class code that established
the initial inheritance.  In other words, if an inheritance is set up inside a
class, then disinheritance can only be done from inside that class.
.Sp
In the event of a method naming conflict, the \f(CW\*(C`\->disinherit()\*(C'\fR method can
be called using its fully-qualified name:
.Sp
.Vb 1
\& $self\->Object::InsideOut::disinherit($obj [, ...])
.Ve
.PP
\&\fB\s-1NOTE\s0\fR:  With foreign inheritance, you only have access to class and object
methods.  The encapsulation of the inherited objects is strong, meaning that
only the class where the inheritance takes place has direct access to the
inherited object.  If access to the inherited objects themselves, or their
internal hash fields (in the case of \fIblessed hash\fR objects), is needed
outside the class, then you'll need to write your own accessors for that.
.PP
\&\fB\s-1LIMITATION\s0\fR:  You cannot use fully-qualified method names to access foreign
methods (when encapsulated foreign objects are involved).  Thus, the following
will not work:
.PP
.Vb 2
\& my $obj = My::Class\->new();
\& $obj\->Foreign::Class::bar();
.Ve
.PP
Normally, you shouldn't ever need to do the above:  \f(CW\*(C`$obj\->bar()\*(C'\fR would
suffice.
.PP
The only time this may be an issue is when the \fInative\fR class \fIoverrides\fR an
inherited foreign class's method (e.g., \f(CW\*(C`My::Class\*(C'\fR has its own
\&\f(CW\*(C`\->bar()\*(C'\fR method).  Such overridden methods are not directly callable.
If such overriding is intentional, then this should not be an issue:  No one
should be writing code that tries to by-pass the override.  However, if the
overriding is accidentally, then either the \fInative\fR method should be renamed,
or the \fInative\fR class should provide a wrapper method so that the
functionality of the overridden method is made available under a different
name.
.ie n .SS """use base"" and Fully-qualified Method Names"
.el .SS "\f(CWuse base\fP and Fully-qualified Method Names"
.IX Subsection "use base and Fully-qualified Method Names"
The foreign inheritance methodology handled by the above is predicated on
non\-Object::InsideOut classes that generate their own objects and expect their
object methods to be invoked via those objects.
.PP
There are exceptions to this rule:
.IP "1. Foreign object methods that expect to be invoked via the inheriting class's object, or foreign object methods that don't care how they are invoked (i.e., they don't make reference to the invoking object)." 4
.IX Item "1. Foreign object methods that expect to be invoked via the inheriting class's object, or foreign object methods that don't care how they are invoked (i.e., they don't make reference to the invoking object)."
This is the case where a class provides auxiliary methods for your objects,
but from which you don't actually create any objects (i.e., there is no
corresponding foreign object, and \f(CW\*(C`$obj\->inherit($foreign)\*(C'\fR is not used.)
.Sp
In this case, you can either:
.Sp
a. Declare the foreign class using the standard method (i.e.,
\&\f(CW\*(C`use\ Object::InsideOut\ qw(Foreign::Class);\*(C'\fR), and invoke its methods using
their full path (e.g., \f(CW\*(C`$obj\->Foreign::Class::method();\*(C'\fR); or
.Sp
b. You can use the base pragma so that you don't have to use the full path
for foreign methods.
.Sp
.Vb 5
\& package My::Class; {
\&     use Object::InsideOut;
\&     use base \*(AqForeign::Class\*(Aq;
\&     ...
\& }
.Ve
.Sp
The former scheme is faster.
.IP "2. Foreign class methods that expect to be invoked via the inheriting class." 4
.IX Item "2. Foreign class methods that expect to be invoked via the inheriting class."
As with the above, you can either invoke the class methods using their full
path (e.g., \f(CW\*(C`My::Class\->Foreign::Class::method();\*(C'\fR), or you can
\&\f(CW\*(C`use\ base\*(C'\fR so that you don't have to use the full path.  Again, using the
full path is faster.
.Sp
Class::Singleton is an example of this type of class.
.IP "3. Class methods that don't care how they are invoked (i.e., they don't make reference to the invoking class)." 4
.IX Item "3. Class methods that don't care how they are invoked (i.e., they don't make reference to the invoking class)."
In this case, you can either use
\&\f(CW\*(C`use\ Object::InsideOut\ qw(Foreign::Class);\*(C'\fR for consistency, or use
\&\f(CW\*(C`use\ base\ qw(Foreign::Class);\*(C'\fR if (slightly) better performance is needed.
.PP
If you're not familiar with the inner workings of the foreign class such that
you don't know if or which of the above exceptions applies, then the formulaic
approach would be to first use the documented method for foreign inheritance
(i.e., \f(CW\*(C`use\ Object::InsideOut\ qw(Foreign::Class);\*(C'\fR).  If that works, then
I strongly recommend that you just use that approach unless you have a good
reason not to.  If it doesn't work, then try \f(CW\*(C`use\ base\*(C'\fR.
.SH "INTROSPECTION"
.IX Header "INTROSPECTION"
For Perl 5.8.0 and later, Object::InsideOut provides an introspection \s-1API\s0 that
allow you to obtain metadata on a class's hierarchy, constructor parameters,
and methods.
.ie n .IP "my $meta = My::Class\->\fImeta()\fR;" 4
.el .IP "my \f(CW$meta\fR = My::Class\->\fImeta()\fR;" 4
.IX Item "my $meta = My::Class->meta();"
.PD 0
.ie n .IP "my $meta = $obj\->\fImeta()\fR;" 4
.el .IP "my \f(CW$meta\fR = \f(CW$obj\fR\->\fImeta()\fR;" 4
.IX Item "my $meta = $obj->meta();"
.PD
The \f(CW\*(C`\->meta()\*(C'\fR method, which is exported by Object::InsideOut to each
class, returns an Object::InsideOut::Metadata object which can then be
\&\fIqueried\fR for information about the invoking class or invoking object's
class:
.Sp
.Vb 2
\& # Get an object\*(Aqs class hierarchy
\& my @classes = $obj\->meta()\->get_classes();
\&
\& # Get info on the args for a class\*(Aqs constructor (i.e., \->new() parameters)
\& my %args = My::Class\->meta()\->get_args();
\&
\& # Get info on the methods that can be called by an object
\& my %methods = $obj\->meta()\->get_methods();
.Ve
.IP "My::Class\->\fIisa()\fR;" 4
.IX Item "My::Class->isa();"
.PD 0
.ie n .IP "$obj\->\fIisa()\fR;" 4
.el .IP "\f(CW$obj\fR\->\fIisa()\fR;" 4
.IX Item "$obj->isa();"
.PD
When called in an array context, calling \f(CW\*(C`\->isa()\*(C'\fR without any arguments
on an Object::InsideOut class or object returns a list of the classes in the
class hierarchy for that class or object, and is equivalent to:
.Sp
.Vb 1
\& my @classes = $obj\->meta()\->get_classes();
.Ve
.Sp
When called in a scalar context, it returns an array ref containing the
classes.
.IP "My::Class\->\fIcan()\fR;" 4
.IX Item "My::Class->can();"
.PD 0
.ie n .IP "$obj\->\fIcan()\fR;" 4
.el .IP "\f(CW$obj\fR\->\fIcan()\fR;" 4
.IX Item "$obj->can();"
.PD
When called in an array context, calling \f(CW\*(C`\->can()\*(C'\fR without any arguments
on an Object::InsideOut class or object returns a list of the method names for
that class or object, and is equivalent to:
.Sp
.Vb 2
\& my %methods = $obj\->meta()\->get_methods();
\& my @methods = keys(%methods);
.Ve
.Sp
When called in a scalar context, it returns an array ref containing the
method names.
.PP
See Object::InsideOut::Metadata for more details.
.SH "THREAD SUPPORT"
.IX Header "THREAD SUPPORT"
For Perl 5.8.1 and later, Object::InsideOut fully supports threads (i.e.,
is thread safe), and supports the sharing of Object::InsideOut objects between
threads using threads::shared.
.PP
To use Object::InsideOut in a threaded application, you must put
\&\f(CW\*(C`use\ threads;\*(C'\fR at the beginning of the application.  (The use of
\&\f(CW\*(C`require\ threads;\*(C'\fR after the program is running is not supported.)  If
object sharing is to be utilized, then \f(CW\*(C`use\ threads::shared;\*(C'\fR should
follow.
.PP
If you just \f(CW\*(C`use\ threads;\*(C'\fR, then objects from one thread will be copied
and made available in a child thread.
.PP
The addition of \f(CW\*(C`use\ threads::shared;\*(C'\fR in and of itself does not alter the
behavior of Object::InsideOut objects.  The default behavior is to \fInot\fR
share objects between threads (i.e., they act the same as with
\&\f(CW\*(C`use\ threads;\*(C'\fR alone).
.PP
To enable the sharing of objects between threads, you must specify which
classes will be involved with thread object sharing.  There are two methods
for doing this.  The first involves setting a \f(CW\*(C`::shared\*(C'\fR variable (inside
a \f(CW\*(C`BEGIN\*(C'\fR block) for the class prior to its use:
.PP
.Vb 2
\& use threads;
\& use threads::shared;
\&
\& BEGIN {
\&     $My::Class::shared = 1;
\& }
\& use My::Class;
.Ve
.PP
The other method is for a class to add a \f(CW\*(C`:SHARED\*(C'\fR flag to its
\&\f(CW\*(C`use\ Object::InsideOut\ ...\*(C'\fR declaration:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:SHARED\*(Aq;
\&     ...
\& }
.Ve
.PP
When either sharing flag is set for one class in an object hierarchy, then all
the classes in the hierarchy are affected.
.PP
If a class cannot support thread object sharing (e.g., one of the object
fields contains code refs [which Perl cannot share between threads]), it
should specifically declare this fact:
.PP
.Vb 4
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:NOT_SHARED\*(Aq;
\&     ...
\& }
.Ve
.PP
However, you cannot mix thread object sharing classes with non-sharing
classes in the same class hierarchy:
.PP
.Vb 2
\& use threads;
\& use threads::shared;
\&
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:SHARED\*(Aq;
\&     ...
\& }
\&
\& package Other::Class; {
\&     use Object::InsideOut \*(Aq:NOT_SHARED\*(Aq;
\&     ...
\& }
\&
\& package My::Derived; {
\&     use Object::InsideOut qw(My::Class Other::Class);   # ERROR!
\&     ...
\& }
.Ve
.PP
Here is a complete example with thread object sharing enabled:
.PP
.Vb 2
\& use threads;
\& use threads::shared;
\&
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:SHARED\*(Aq;
\&
\&     # One list\-type field
\&     my @data :Field :Type(list) :Acc(data);
\& }
\&
\& package main;
\&
\& # New object
\& my $obj = My::Class\->new();
\&
\& # Set the object\*(Aqs \*(Aqdata\*(Aq field
\& $obj\->data(qw(foo bar baz));
\&
\& # Print out the object\*(Aqs data
\& print(join(\*(Aq, \*(Aq, @{$obj\->data()}), "\en");       # "foo, bar, baz"
\&
\& # Create a thread and manipulate the object\*(Aqs data
\& my $rc = threads\->create(
\&         sub {
\&             # Read the object\*(Aqs data
\&             my $data = $obj\->data();
\&             # Print out the object\*(Aqs data
\&             print(join(\*(Aq, \*(Aq, @{$data}), "\en");  # "foo, bar, baz"
\&             # Change the object\*(Aqs data
\&             $obj\->data(@$data[1..2], \*(Aqzooks\*(Aq);
\&             # Print out the object\*(Aqs modified data
\&             print(join(\*(Aq, \*(Aq, @{$obj\->data()}), "\en");  # "bar, baz, zooks"
\&             return (1);
\&         }
\&     )\->join();
\&
\& # Show that changes in the object are visible in the parent thread
\& # I.e., this shows that the object was indeed shared between threads
\& print(join(\*(Aq, \*(Aq, @{$obj\->data()}), "\en");       # "bar, baz, zooks"
.Ve
.SH "HASH ONLY CLASSES"
.IX Header "HASH ONLY CLASSES"
For performance considerations, it is recommended that arrays be used for
class fields whenever possible.  The only time when hash-bases fields are
required is when a class must provide its own object \s-1ID\s0, and
those IDs are something other than low-valued integers.  In this case, hashes
must be used for fields not only in the class that defines the object \s-1ID\s0
subroutine, but also in every class in any class hierarchy that include such a
class.
.PP
The \fIhash only\fR requirement can be enforced by adding the \f(CW\*(C`:HASH_ONLY\*(C'\fR flag
to a class's \f(CW\*(C`use\ Object::InsideOut\ ...\*(C'\fR declaration:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:hash_only\*(Aq;
\&
\&     ...
\& }
.Ve
.PP
This will cause Object::Inside to check every class in any class hierarchy
that includes such flagged classes to make sure their fields are hashes and
not arrays.  It will also fail any \->\fIcreate_field()\fR call that tries to create an array-based field in any such class.
.SH "SECURITY"
.IX Header "SECURITY"
In the default case where Object::InsideOut provides object IDs that are
sequential integers, it is possible to hack together a \fIfake\fR
Object::InsideOut object, and so gain access to another object's data:
.PP
.Vb 3
\& my $fake = bless(\edo{my $scalar}, \*(AqSome::Class\*(Aq);
\& $$fake = 86;   # ID of another object
\& my $stolen = $fake\->get_data();
.Ve
.PP
Why anyone would try to do this is unknown.  How this could be used for any
sort of malicious exploitation is also unknown.  However, if preventing this
sort of security issue is a requirement, it can be accomplished by adding the
\&\f(CW\*(C`:SECURE\*(C'\fR flag to a class's \f(CW\*(C`use\ Object::InsideOut\ ...\*(C'\fR declaration:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut \*(Aq:SECURE\*(Aq;
\&
\&     ...
\& }
.Ve
.PP
This places the module \f(CW\*(C`Object::InsideOut::Secure\*(C'\fR in the class hierarchy.
Object::InsideOut::Secure provides an :ID subroutine that
generates random integers for object IDs, thus preventing other code from
being able to create fake objects by \fIguessing\fR at IDs.
.PP
Using \f(CW\*(C`:SECURE\*(C'\fR mode requires Math::Random::MT::Auto (v5.04 or later).
.PP
Because the object IDs used with \f(CW\*(C`:SECURE\*(C'\fR mode are large random values,
the :HASH_ONLY flag is forced on all the classes in
the hierarchy.
.PP
For efficiency, it is recommended that the \f(CW\*(C`:SECURE\*(C'\fR flag be added to the
topmost class(es) in a hierarchy.
.SH "ATTRIBUTE HANDLERS"
.IX Header "ATTRIBUTE HANDLERS"
Object::InsideOut uses \fIattribute 'modify' handlers\fR as described in
\&\*(L"Package-specific Attribute Handling\*(R" in attributes, and provides a mechanism
for adding attribute handlers to your own classes.  Instead of naming your
attribute handler as \f(CW\*(C`MODIFY_*_ATTRIBUTES\*(C'\fR, name it something else and then
label it with the \f(CW\*(C`:MODIFY_*_ATTRIBUTES\*(C'\fR attribute (or \f(CW\*(C`:MOD_*_ATTRS\*(C'\fR for
short).  Your handler should work just as described in
\&\*(L"Package-specific Attribute Handling\*(R" in attributes with regard to its input
arguments, and must return a list of the attributes which were not recognized
by your handler.  Here's an example:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     sub _scalar_attrs :MOD_SCALAR_ATTRS
\&     {
\&         my ($pkg, $scalar, @attrs) = @_;
\&         my @unused_attrs;         # List of any unhandled attributes
\&
\&         while (my $attr = shift(@attrs)) {
\&             if ($attr =~ /.../) {
\&                 # Handle attribute
\&                 ...
\&             } else {
\&                 # We don\*(Aqt handle this attribute
\&                 push(@unused_attrs, $attr);
\&             }
\&         }
\&
\&         return (@unused_attrs);   # Pass along unhandled attributes
\&     }
\& }
.Ve
.PP
Attribute 'modify' handlers are called \fIupward\fR through the class hierarchy
(i.e., \fIbottom up\fR).  This provides child classes with the capability to
\&\fIoverride\fR the handling of attributes by parent classes, or to add attributes
(via the returned list of unhandled attributes) for parent classes to process.
.PP
Attribute 'modify' handlers should be located at the beginning of a package,
or at least before any use of attributes on the corresponding type of variable
or subroutine:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     sub _array_attrs :MOD_ARRAY_ATTRS
\&     {
\&        ...
\&     }
\&
\&     my @my_array :MyArrayAttr;
\& }
.Ve
.PP
For \fIattribute 'fetch' handlers\fR, follow the same procedures:  Label the
subroutine with the \f(CW\*(C`:FETCH_*_ATTRIBUTES\*(C'\fR attribute (or \f(CW\*(C`:FETCH_*_ATTRS\*(C'\fR for
short).  Contrary to the documentation in \*(L"Package-specific
Attribute Handling\*(R" in attributes, \fIattribute 'fetch' handlers\fR receive \fBtwo\fR arguments:
The relevant package name, and a reference to a variable or subroutine for
which package-defined attributes are desired.
.PP
Attribute handlers are normal rendered hidden.
.SH "SPECIAL USAGE"
.IX Header "SPECIAL USAGE"
.ie n .SS "Usage With ""Exporter"""
.el .SS "Usage With \f(CWExporter\fP"
.IX Subsection "Usage With Exporter"
It is possible to use Exporter to export functions from one inside-out
object class to another:
.PP
.Vb 2
\& use strict;
\& use warnings;
\&
\& package Foo; {
\&     use Object::InsideOut \*(AqExporter\*(Aq;
\&     BEGIN {
\&         our @EXPORT_OK = qw(foo_name);
\&     }
\&
\&     sub foo_name
\&     {
\&         return (_\|_PACKAGE_\|_);
\&     }
\& }
\&
\& package Bar; {
\&     use Object::InsideOut \*(AqFoo\*(Aq => [ qw(foo_name) ];
\&
\&     sub get_foo_name
\&     {
\&         return (foo_name());
\&     }
\& }
\&
\& package main;
\&
\& print("Bar got Foo\*(Aqs name as \*(Aq", Bar::get_foo_name(), "\*(Aq\en");
.Ve
.PP
Note that the \f(CW\*(C`BEGIN\*(C'\fR block is needed to ensure that the Exporter symbol
arrays (in this case \f(CW@EXPORT_OK\fR) get populated properly.
.ie n .SS "Usage With ""require"" and ""mod_perl"""
.el .SS "Usage With \f(CWrequire\fP and \f(CWmod_perl\fP"
.IX Subsection "Usage With require and mod_perl"
Object::InsideOut usage under mod_perl and with runtime-loaded classes is
supported automatically; no special coding is required.
.PP
\&\fBCaveat\fR:
Runtime loading of classes should be performed before any objects are created
within any of the classes in their hierarchies.  If Object::InsideOut cannot
create a hierarchy because of previously created objects (even if all those
objects have been destroyed), a runtime error will be generated.
.SS "Singleton Classes"
.IX Subsection "Singleton Classes"
A singleton class is a case where you would provide your own \f(CW\*(C`\->new()\*(C'\fR
method that in turn calls Object::InsideOut's \f(CW\*(C`\->new()\*(C'\fR method:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     my $singleton;
\&
\&     sub new {
\&         my $thing = shift;
\&         if (! $singleton) {
\&             $singleton = $thing\->Object::InsideOut::new(@_);
\&         }
\&         return ($singleton);
\&     }
\& }
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Object::InsideOut uses \f(CW\*(C`Exception::Class\*(C'\fR for reporting errors.  The base
error class for this module is \f(CW\*(C`OIO\*(C'\fR.  Here is an example of the basic manner
for trapping and handling errors:
.PP
.Vb 6
\& my $obj;
\& eval { $obj = My::Class\->new(); };
\& if (my $e = OIO\->caught()) {
\&     warn(\*(AqFailure creating object: \*(Aq.$e);
\&     ...
\& }
.Ve
.PP
A more comprehensive approach might employ elements of the following:
.PP
.Vb 12
\& eval { ... };
\& if (my $e = OIO\->caught()) {
\&     # An error generated by Object::InsideOut
\&     ...
\& } elsif (my $e = Exception::Class::Base\->caught()) {
\&     # An error generated by other code that uses Exception::Class
\&     ...
\& } elsif ($@) {
\&     # An unhandled error (i.e., generated by code that doesn\*(Aqt use
\&     # Exception::Class)
\&     ...
\& }
.Ve
.PP
I have tried to make the messages and information returned by the error
objects as informative as possible.  Suggested improvements are welcome.
Also, please bring to my attention any conditions that you encounter where an
error occurs as a result of Object::InsideOut code that doesn't generate an
Exception::Class object.  Here is one such error:
.IP "Invalid \s-1ARRAY/HASH\s0 attribute" 4
.IX Item "Invalid ARRAY/HASH attribute"
This error indicates you forgot \f(CW\*(C`use Object::InsideOut;\*(C'\fR in your class's
code.
.PP
Object::InsideOut installs a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler (see \*(L"die \s-1LIST\s0\*(R" in perlfunc
and \*(L"eval \s-1BLOCK\s0\*(R" in perlfunc) to catch any errant exceptions from
class-specific code, namely, \f(CW\*(C`:Init\*(C'\fR, \f(CW\*(C`:Replicate\*(C'\fR, \f(CW\*(C`:Destroy\*(C'\fR, etc.
subroutines.  When using \f(CW\*(C`eval\*(C'\fR blocks inside these subroutines, you should
localize \f(CW$SIG{\*(Aq_\|_DIE_\|_\*(Aq}\fR to keep Object::InsideOut's \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler
from interfering with exceptions generated inside the \f(CW\*(C`eval\*(C'\fR blocks.  For
example:
.PP
.Vb 11
\& sub _init :Init {
\&     ...
\&     eval {
\&         local $SIG{\*(Aq_\|_DIE_\|_\*(Aq};
\&         ...
\&     };
\&     if $@ {
\&         # Handle caught exception
\&     }
\&     ...
\& }
.Ve
.PP
Here's another example, where the \f(CW\*(C`die\*(C'\fR function is used as a method of flow
control for leaving an \f(CW\*(C`eval\*(C'\fR block:
.PP
.Vb 12
\& eval {
\&     local $SIG{\*(Aq_\|_DIE_\|_\*(Aq};           # Suppress any existing _\|_DIE_\|_ handler
\&     ...
\&     die({\*(Aqfound\*(Aq => 1}) if $found;   # Leave the eval block
\&     ...
\& };
\& if ($@) {
\&     die unless (ref($@) && $@\->{\*(Aqfound\*(Aq});   # Propagate any \*(Aqreal\*(Aq error
\&     # Handle \*(Aqfound\*(Aq case
\&     ...
\& }
\& # Handle \*(Aqnot found\*(Aq case
.Ve
.PP
Similarly, if calling code from other modules that use the above flow control
mechanism, but without localizing \f(CW$SIG{\*(Aq_\|_DIE_\|_\*(Aq}\fR, you can workaround this
deficiency with your own \f(CW\*(C`eval\*(C'\fR block:
.PP
.Vb 7
\& eval {
\&     local $SIG{\*(Aq_\|_DIE_\|_\*(Aq};     # Suppress any existing _\|_DIE_\|_ handler
\&     Some::Module::func();      # Call function that fails to localize
\& };
\& if ($@) {
\&     # Handle caught exception
\& }
.Ve
.PP
In addition, you should file a bug report against the offending module along
with a patch that adds the missing \f(CW\*(C`local\ $SIG{\*(Aq_\|_DIE_\|_\*(Aq};\*(C'\fR statement.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
If you receive an error similar to this:
.PP
.Vb 1
\& ERROR: Attempt to DESTROY object ID 1 of class Foo twice
.Ve
.PP
the cause may be that some module used by your application is doing
\&\f(CW\*(C`require threads\*(C'\fR somewhere in the background.  \s-1DBI\s0 is one such module.
The workaround is to add \f(CW\*(C`use threads;\*(C'\fR at the start of your application.
.PP
Another cause of the above is returning a non-shared object from a thread
either explicitly or implicitly when the result of the last statement in the
thread subroutine is an object.  For example:
.PP
.Vb 3
\& sub thr_func {
\&     my $obj = MyClass\->new();
\& }
.Ve
.PP
which is equivalent to:
.PP
.Vb 3
\& sub thr_func {
\&     return MyClass\->new();
\& }
.Ve
.PP
This can be avoided by ensuring your thread subroutine ends with \f(CW\*(C`return;\*(C'\fR.
.PP
The equality operator (e.g., \f(CW\*(C`if ($obj1 == $obj2) { ...\*(C'\fR) is overloaded
for \f(CW\*(C`:SHARED\*(C'\fR classes when threads::shared is loaded.  The overload
subroutine compares object classes and IDs because references to the same
thread shared object may have different refaddrs.
.PP
You cannot overload an object to a scalar context (i.e., can't \f(CW\*(C`:SCALARIFY\*(C'\fR).
.PP
You cannot use two instances of the same class with mixed thread object
sharing in same application.
.PP
Cannot use attributes on \fIsubroutine stubs\fR (i.e., forward declaration
without later definition) with \f(CW\*(C`:Automethod\*(C'\fR:
.PP
.Vb 2
\& package My::Class; {
\&     sub method :Private;   # Will not work
\&
\&     sub _automethod :Automethod
\&     {
\&         # Code to handle call to \*(Aqmethod\*(Aq stub
\&     }
\& }
.Ve
.PP
Due to limitations in the Perl parser, the entirety of any one attribute must
be on a single line.  (However, multiple attributes may appear on separate
lines.)
.PP
If a \fIset\fR accessor accepts scalars, then you can store any inside-out
object type in it.  If its \f(CW\*(C`Type\*(C'\fR is set to \f(CW\*(C`HASH\*(C'\fR, then it can store any
\&\fIblessed hash\fR object.
.PP
Returning objects from threads does not work:
.PP
.Vb 1
\& my $obj = threads\->create(sub { return (Foo\->new()); })\->join();  # BAD
.Ve
.PP
Instead, use thread object sharing, create the object before launching the
thread, and then manipulate the object inside the thread:
.PP
.Vb 3
\& my $obj = Foo\->new();   # Class \*(AqFoo\*(Aq is set \*(Aq:SHARED\*(Aq
\& threads\->create(sub { $obj\->set_data(\*(Aqbar\*(Aq); })\->join();
\& my $data = $obj\->get_data();
.Ve
.PP
Due to a limitation in threads::shared version 1.39 and earlier, if storing
shared objects inside other shared objects, you should use \f(CW\*(C`delete()\*(C'\fR to
remove them from internal fields (e.g., \f(CW\*(C`delete($field[$$self]);\*(C'\fR) when
necessary so that the objects' destructor gets called.  Upgrading to version
1.40 or later alleviates most of this issue except during global destruction.
See threads::shared for more.
.PP
With Perl 5.8.8 and earlier, there are bugs associated with threads::shared
that may prevent you from storing objects inside of shared objects, or using
foreign inheritance with shared objects.  With Perl 5.8.9 (and later) together
with threads::shared 1.15 (and later), you can store shared objects inside
of other shared objects, and you can use foreign inheritance with shared
objects (provided the foreign class supports shared objects as well).
.PP
Due to internal complexities, the following actions are not supported in code
that uses threads::shared while there are any threads active:
.IP "\(bu" 4
Runtime loading of Object::InsideOut classes
.IP "\(bu" 4
Using \->\fIadd_class()\fR
.PP
It is recommended that such activities, if needed, be performed in the main
application code before any threads are created (or at least while there are
no active threads).
.PP
For Perl 5.6.0 through 5.8.0, a Perl bug prevents package variables (e.g.,
object attribute arrays/hashes) from being referenced properly from subroutine
refs returned by an \f(CW\*(C`:Automethod\*(C'\fR subroutine.  For Perl 5.8.0 there is no
workaround:  This bug causes Perl to core dump.  For Perl 5.6.0 through 5.6.2,
the workaround is to create a ref to the required variable inside the
\&\f(CW\*(C`:Automethod\*(C'\fR subroutine, and use that inside the subroutine ref:
.PP
.Vb 2
\& package My::Class; {
\&     use Object::InsideOut;
\&
\&     my %data;
\&
\&     sub auto :Automethod
\&     {
\&         my $self = $_[0];
\&         my $name = $_;
\&
\&         my $data = \e%data;      # Workaround for 5.6.X bug
\&
\&         return sub {
\&                     my $self = shift;
\&                     if (! @_) {
\&                         return ($$data{$name});
\&                     }
\&                     $$data{$name} = shift;
\&                };
\&     }
\& }
.Ve
.PP
For Perl 5.8.1 through 5.8.4, a Perl bug produces spurious warning messages
when threads are destroyed.  These messages are innocuous, and can be
suppressed by adding the following to your application code:
.PP
.Vb 5
\& $SIG{\*(Aq_\|_WARN_\|_\*(Aq} = sub {
\&         if ($_[0] !~ /^Attempt to free unreferenced scalar/) {
\&             print(STDERR @_);
\&         }
\&     };
.Ve
.PP
A better solution would be to upgrade threads and threads::shared from
\&\s-1CPAN\s0, especially if you encounter other problems associated with threads.
.PP
For Perl 5.8.4 and 5.8.5, the \*(L"Storable\*(R" feature does not work due to a
Perl bug.  Use Object::InsideOut v1.33 if needed.
.PP
Due to bugs in the Perl interpreter, using the introspection \s-1API\s0 (i.e.
\&\f(CW\*(C`\->meta()\*(C'\fR, etc.) requires Perl 5.8.0 or later.
.PP
The version of Want that is available via \s-1PPM\s0 for ActivePerl is defective,
and causes failures when using \f(CW\*(C`:lvalue\*(C'\fR accessors.  Remove it, and then
download and install the Want module using \s-1CPAN\s0.
.PP
Devel::StackTrace (used by Exception::Class) makes use of the \fI\s-1DB\s0\fR
namespace.  As a consequence, Object::InsideOut thinks that \f(CW\*(C`package\ DB\*(C'\fR
is already loaded.  Therefore, if you create a class called \fI\s-1DB\s0\fR that is
sub-classed by other packages, you may need to \f(CW\*(C`require\*(C'\fR it as follows:
.PP
.Vb 5
\& package DB::Sub; {
\&     require DB;
\&     use Object::InsideOut qw(DB);
\&     ...
\& }
.Ve
.PP
View existing bug reports at, and submit any new bugs, problems, patches, etc.
to: <http://rt.cpan.org/Public/Dist/Display.html?Name=Object\-InsideOut>
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.IP "Perl 5.6.0 or later" 4
.IX Item "Perl 5.6.0 or later"
.PD 0
.IP "Exception::Class v1.22 or later" 4
.IX Item "Exception::Class v1.22 or later"
.IP "Scalar::Util v1.10 or later" 4
.IX Item "Scalar::Util v1.10 or later"
.PD
It is possible to install a \fIpure perl\fR version of Scalar::Util, however, it
will be missing the \fIweaken()\fR function which is
needed by Object::InsideOut.  You'll need to upgrade your version of
Scalar::Util to one that supports its \f(CW\*(C`XS\*(C'\fR code.
.IP "Test::More v0.50 or later" 4
.IX Item "Test::More v0.50 or later"
Needed for testing during installation.
.IP "Want v0.12 or later" 4
.IX Item "Want v0.12 or later"
Optional.  Provides support for \*(L":lvalue Accessors\*(R".
.IP "Math::Random::MT::Auto v5.04 or later)" 4
.IX Item "Math::Random::MT::Auto v5.04 or later)"
Optional.  Provides support for :SECURE mode.
.PP
To cover all of the above requirements and more, it is recommended that you
install Bundle::Object::InsideOut using \s-1CPAN:\s0
.PP
.Vb 1
\& perl \-MCPAN \-e \*(Aqinstall Bundle::Object::InsideOut\*(Aq
.Ve
.PP
This will install the latest versions of all the required and optional modules
needed for full support of all of the features provided by Object::InsideOut.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Object::InsideOut Discussion Forum on \s-1CPAN:\s0
<http://www.cpanforum.com/dist/Object\-InsideOut>
.PP
Inside-out Object Model:
<http://www.perlfoundation.org/perl5/index.cgi?inside_out_object>,
<http://www.perlmonks.org/?node_id=219378>,
<http://www.perlmonks.org/?node_id=483162>,
<http://www.perlmonks.org/?node_id=515650>,
Chapters 15 and 16 of \fIPerl Best Practices\fR by Damian Conway
.PP
Object::InsideOut::Metadata
.PP
Storable, <Exception:Class>, Want, Math::Random::MT::Auto,
attributes, overload
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Abigail <perl\ \s-1AT\s0\ abigail\ \s-1DOT\s0\ nl> for inside-out objects in general.
.PP
Damian Conway <dconway\ \s-1AT\s0\ cpan\ \s-1DOT\s0\ org> for Class::Std, and for
delegator methods.
.PP
David A. Golden <dagolden\ \s-1AT\s0\ cpan\ \s-1DOT\s0\ org> for thread handling for
inside-out objects.
.PP
Dan Kubb <dan.kubb\-cpan\ \s-1AT\s0\ autopilotmarketing\ \s-1DOT\s0\ com> for
\&\f(CW\*(C`:Chained\*(C'\fR methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerry D. Hedden, <jdhedden\ \s-1AT\s0\ cpan\ \s-1DOT\s0\ org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 \- 2012 Jerry D. Hedden. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.SH "TRANSLATIONS"
.IX Header "TRANSLATIONS"
A Japanese translation of this documentation by
\&\s-1TSUJII\s0, Naofumi <tsun\ \s-1DOT\s0\ nt\ \s-1AT\s0\ gmail\ \s-1DOT\s0\ com>
is available at <http://perldoc.jp/docs/modules/>.
