.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Convert 3"
.TH Convert 3 "2004-09-29" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Bezier::Convert \- Convert cubic and quadratic bezier each other.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Math::Bezier::Convert;
\&
\&  @new_cubic = divide_cubic($cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $cx4, $cy4, $t);
\&  @new_quad  = divide_quadratic($cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $t);
\&  @quad = cubic_to_quadratic(@cubic);
\&  @cubic = quadratic_to_cubic(@quad);
\&  @lines = cubic_to_lines(@cubic);
\&  @lines = quadratic_to_lines(@cubic);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::Bezier::Convert provides functions to convert quadratic bezier to cubic, 
to approximate cubic bezier to quadratic, and to approximate cubic and quadratic 
bezier to polyline.
.PP
Each function takes an array of the coordinates of control points of the bezier curve.
Cubic bezier consists of one \fI\s-1ANCHOR\s0\fR control point, two \fI\s-1DIRECTOR\s0\fR control points, one \fI\s-1ANCHOR\s0\fR, two \fI\s-1DIRECTORS\s0\fR, ... and the last \fI\s-1ANCHOR\s0\fR. 
Quadratic bezier consists of one \fI\s-1ANCHOR\s0\fR, one \fI\s-1DIRECTOR\s0\fR, ... and the last \fI\s-1ANCHOR\s0\fR.
The curve pass over the \fI\s-1ANCHOR\s0\fR point, but dose not the \fI\s-1DIRECTOR\s0\fR point.  
Each point consists of X and Y coordinates.  Both are flatly listed in the 
array of the curve, like ($x1, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR, ...).
.ie n .IP "divide_cubic( $cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $cx4, $cy4, $t )" 4
.el .IP "divide_cubic( \f(CW$cx1\fR, \f(CW$cy1\fR, \f(CW$cx2\fR, \f(CW$cy2\fR, \f(CW$cx3\fR, \f(CW$cy3\fR, \f(CW$cx4\fR, \f(CW$cy4\fR, \f(CW$t\fR )" 4
.IX Item "divide_cubic( $cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $cx4, $cy4, $t )"
divides one segment of the cubic bezier curve at ratio \f(CW$t\fR, and returns 
new cubic bezier which has two segment (7 points).
.ie n .IP "divide_quadratic( $cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $t )" 4
.el .IP "divide_quadratic( \f(CW$cx1\fR, \f(CW$cy1\fR, \f(CW$cx2\fR, \f(CW$cy2\fR, \f(CW$cx3\fR, \f(CW$cy3\fR, \f(CW$t\fR )" 4
.IX Item "divide_quadratic( $cx1, $cy1, $cx2, $cy2, $cx3, $cy3, $t )"
divides one segment of the quadratic bezier curve at ratio \f(CW$t\fR, and returns 
new quadratic bezier which has two segment (5 points).
.ie n .IP "cubic_to_quadratic( @cubic )" 4
.el .IP "cubic_to_quadratic( \f(CW@cubic\fR )" 4
.IX Item "cubic_to_quadratic( @cubic )"
approximates cubic bezier to quadratic bezier, and returns an array of the 
control points of the quadratic bezier curve.
.ie n .IP "quadratic_to_cubic( @quadratic )" 4
.el .IP "quadratic_to_cubic( \f(CW@quadratic\fR )" 4
.IX Item "quadratic_to_cubic( @quadratic )"
converts quadratic bezier to cubic bezier, and returns an array of the 
control points of the cubic bezier curve.
.ie n .IP "cubic_to_lines( @cubic )" 4
.el .IP "cubic_to_lines( \f(CW@cubic\fR )" 4
.IX Item "cubic_to_lines( @cubic )"
approximates cubic bezier to polyline, and returns an array of endpoints.
.ie n .IP "quadratic_to_lines( @cubic )" 4
.el .IP "quadratic_to_lines( \f(CW@cubic\fR )" 4
.IX Item "quadratic_to_lines( @cubic )"
approximates quadratic bezier to polyline, and returns an array of endpoints.
.SS "\s-1GLOBALS\s0"
.IX Subsection "GLOBALS"
.ie n .IP "$Math::Bezier::Convert::APPROX_QUADRATIC_TOLERANCE" 4
.el .IP "\f(CW$Math::Bezier::Convert::APPROX_QUADRATIC_TOLERANCE\fR" 4
.IX Item "$Math::Bezier::Convert::APPROX_QUADRATIC_TOLERANCE"
.PD 0
.ie n .IP "$Math::Bezier::Convert::APPROX_LINE_TOLERANCE" 4
.el .IP "\f(CW$Math::Bezier::Convert::APPROX_LINE_TOLERANCE\fR" 4
.IX Item "$Math::Bezier::Convert::APPROX_LINE_TOLERANCE"
.PD
Tolerance of the distance between the half point of the cubic bezier and the approximation point.
Default is 1.
.ie n .IP "$Math::Bezier::Convert::CTRL_PT_TOLERANCE" 4
.el .IP "\f(CW$Math::Bezier::Convert::CTRL_PT_TOLERANCE\fR" 4
.IX Item "$Math::Bezier::Convert::CTRL_PT_TOLERANCE"
Tolerance of the \fIANCHOR-DIRECTOR\fR distance ratio of quadratic to cubic.
Default is 3.  It must be specified more than 1.5.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
All functions described above are exported when ':all' tag is specified.
All global variables are not exported in any case.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2000 Yasuhiro Sasama (ySas), <ysas@nmt.ne.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
