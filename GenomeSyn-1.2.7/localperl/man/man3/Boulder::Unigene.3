.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Boulder::Unigene 3"
.TH Boulder::Unigene 3 "2000-01-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Boulder::Unigene \- Fetch Unigene data records as parsed Boulder Stones
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # parse a file of Unigene records
\&  $ug = new Boulder::Unigene(\-accessor=>\*(AqFile\*(Aq,
\&                             \-param => \*(Aq/data/unigene/Hs.dat\*(Aq);
\&  while (my $s = $ug\->get) {
\&    print $s\->Identifier;
\&    print $s\->Gene;
\&  }
\&
\&  # parse flatfile records yourself
\&  open (UG,"/data/unigene/Hs.dat");
\&  local $/ = "*RECORD*";
\&  while (<UG>) {
\&     my $s = Boulder::Unigene\->parse($_);
\&     # etc.
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Boulder::Unigene provides retrieval and parsing services for \s-1UNIGENE\s0 records
.PP
Boulder::Unigene provides retrieval and parsing services for \s-1NCBI\s0
Unigene records.  It returns Unigene entries in Stone
format, allowing easy access to the various fields and values.
Boulder::Unigene is a descendent of Boulder::Stream, and provides a
stream-like interface to a series of Stone objects.
.PP
Access to Unigene is provided by one \fIaccessors\fR, which
give access to  local Unigene database.  When you
create a new Boulder::Unigene stream, you provide the
accessors, along with accessor-specific parameters that control what
entries to fetch.  The accessors is:
.IP "File" 2
.IX Item "File"
This provides access to local Unigene entries by reading from a flat file
(typically Hs.dat file downloadable from \s-1NCBI\s0's Ftp site).
The stream will return a Stone corresponding to each of the entries in 
the file, starting from the top of the file and working downward.  The 
parameter is the path to the local file.
.PP
It is also possible to parse a single Unigene entry from a text string 
stored in a scalar variable, returning a Stone object.
.SS "Boulder::Unigene methods"
.IX Subsection "Boulder::Unigene methods"
This section lists the public methods that the \fIBoulder::Unigene\fR
class makes available.
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 3
\&   # Local fetch via File
\&   $ug=new Boulder::Unigene(\-accessor  =>  \*(AqFile\*(Aq,
\&                            \-param     =>  \*(Aq/data/unigene/Hs.dat\*(Aq);
.Ve
.Sp
The \fInew()\fR method creates a new \fIBoulder::Unigene\fR stream on the
accessor provided.  The only possible accessors is \fBFile\fR.  
If successful, the method returns the stream
object.  Otherwise it returns undef.
.Sp
\&\fInew()\fR takes the following arguments:
.Sp
.Vb 2
\&        \-accessor       Name of the accessor to use
\&        \-param          Parameters to pass to the accessor
.Ve
.Sp
Specify the accessor to use with the \fB\-accessor\fR argument.  If not
specified, it defaults to \fBFile\fR.
.Sp
\&\fB\-param\fR is an accessor-specific argument.  The possibilities is:
.Sp
For \fBFile\fR, the \fB\-param\fR argument must point to a string-valued
scalar, which will be interpreted as the path to the file to read
Unigene entries from.
.IP "\fIget()\fR" 4
.IX Item "get()"
The \fIget()\fR method is inherited from \fIBoulder::Stream\fR, and simply
returns the next parsed Unigene Stone, or undef if there is nothing
more to fetch.  It has the same semantics as the parent class,
including the ability to restrict access to certain top-level tags.
.IP "\fIput()\fR" 4
.IX Item "put()"
The \fIput()\fR method is inherited from the parent Boulder::Stream class,
and will write the passed Stone to standard output in Boulder format.
This means that it is currently not possible to write a
Boulder::Unigene object back into Unigene flatfile form.
.SH "OUTPUT TAGS"
.IX Header "OUTPUT TAGS"
The tags returned by the parsing operation are taken from the names shown in the Flat file
Hs.dat since no better description of them is provided yet by the database source producer.
.SS "Top-Level Tags"
.IX Subsection "Top-Level Tags"
These are tags that appear at the top level of the parsed Unigene
entry.
.IP "Identifier" 4
.IX Item "Identifier"
The Unigene identifier of this entry.  Identifier is a single-value tag.
.Sp
Example:
.Sp
.Vb 1
\&      my $identifierNo = $s\->Identifier;
.Ve
.IP "Title" 4
.IX Item "Title"
The Unigene title for this entry.
.Sp
Example:
      my \f(CW$titledef\fR=$s\->Title;
.IP "Gene The Gene associated with   this Unigene entry" 4
.IX Item "Gene The Gene associated with   this Unigene entry"
Example:
      my \f(CW$thegene\fR=$s\->Gene;
.IP "Cytoband The cytological band position of this entry" 4
.IX Item "Cytoband The cytological band position of this entry"
Example:
      my \f(CW$thecytoband\fR=$s\->Cytoband;
.IP "Counts The number of \s-1EST\s0 in this record" 4
.IX Item "Counts The number of EST in this record"
Example:
      my \f(CW$thecounts\fR=$s\->Counts;
.IP "LocusLink The id of the LocusLink entry associated with this record" 4
.IX Item "LocusLink The id of the LocusLink entry associated with this record"
Example:
      my \f(CW$thelocuslink\fR=$s\->LocusLink;
.IP "Chromosome This field contains a list, of the chromosomes numbers in which this entry has been linked" 4
.IX Item "Chromosome This field contains a list, of the chromosomes numbers in which this entry has been linked"
Example:
      my \f(CW@theChromosome\fR=$s\->Chromosome;
.SS "\s-1STS\s0 Multiple records in the form ^STS     ACC=XXXXXX NAME=YYYYYY"
.IX Subsection "STS Multiple records in the form ^STS     ACC=XXXXXX NAME=YYYYYY"
.IP "\s-1ACC\s0" 4
.IX Item "ACC"
.PD 0
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
.PD
.SS "\s-1TXMAP\s0 Multiple records in the form  ^TXMAP  \s-1XXXXXXX\s0; MARKER=YYYYY; RHPANEL=ZZZZ"
.IX Subsection "TXMAP Multiple records in the form  ^TXMAP  XXXXXXX; MARKER=YYYYY; RHPANEL=ZZZZ"
The \s-1TXMAP\s0 tag points to a Stone record that contains multiple
subtags.  Each subtag is the name of a feature which points, in turn,
to a Stone that describes the feature's location and other attributes.
.PP
Each feature will contain one or more of the following subtags:
.IP "\s-1MARKER\s0" 4
.IX Item "MARKER"
.PD 0
.IP "\s-1RHPANEL\s0" 4
.IX Item "RHPANEL"
.PD
.SS "\s-1PROTSIM\s0 Multiple records in the form ^PROTSIM ORG=XXX; PROTID=DBID:YYY; PCT=ZZZ; ALN=QQQQ Where \s-1DBID\s0 is \s-1PID\s0 for indicate presence of GenPept identifier, \s-1SP\s0 to indicate \s-1SWISSPROT\s0 identifier, \s-1PIR\s0 to indicate \s-1PIR\s0 identifier, \s-1PRF\s0 to indicate ???"
.IX Subsection "PROTSIM Multiple records in the form ^PROTSIM ORG=XXX; PROTID=DBID:YYY; PCT=ZZZ; ALN=QQQQ Where DBID is PID for indicate presence of GenPept identifier, SP to indicate SWISSPROT identifier, PIR to indicate PIR identifier, PRF to indicate ???"
.IP "\s-1ORG\s0" 4
.IX Item "ORG"
.PD 0
.IP "\s-1PROTID\s0" 4
.IX Item "PROTID"
.IP "\s-1PCT\s0" 4
.IX Item "PCT"
.IP "\s-1ALN\s0" 4
.IX Item "ALN"
.PD
.SS "\s-1SEQUENCE\s0 Multiple records in the form ^SEQUENCE ACC=XXX; NID=YYYY; \s-1PID\s0 = CLONE= END= LID="
.IX Subsection "SEQUENCE Multiple records in the form ^SEQUENCE ACC=XXX; NID=YYYY; PID = CLONE= END= LID="
.IP "\s-1ACC\s0" 4
.IX Item "ACC"
.PD 0
.IP "\s-1NID\s0" 4
.IX Item "NID"
.IP "\s-1PID\s0" 4
.IX Item "PID"
.IP "\s-1CLONE\s0" 4
.IX Item "CLONE"
.IP "\s-1END\s0" 4
.IX Item "END"
.IP "\s-1LID\s0" 4
.IX Item "LID"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Boulder, Boulder::Blast, Boulder::Genbank
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
Luca I.G. Toldo <luca.toldo@merck.de>
.PP
Copyright (c) 1997 Lincoln D. Stein
Copyright (c) 1999 Luca I.G. Toldo
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
