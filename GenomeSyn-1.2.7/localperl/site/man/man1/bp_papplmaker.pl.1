.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_PAPPLMAKER 1"
.TH BP_PAPPLMAKER 1 "2015-11-03" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
papplmaker.PLS \-  Analysis tools module generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # get some help
\&  papplmaker.PLS \-h
\&
\&  # generate module for program \*(Aqseqret\*(Aq
\&  papplmaker.PLS \-n edit.seqret
\&
\&  # ditto, but specify where to find \*(Aqseqret\*(Aq
\&  papplmaker.PLS \-n edit::seqret
\&             \-l http://localhost:8080/axis/services
\&
\&  # ditto, but specify a non\-default access method to \*(Aqseqret\*(Aq
\&  papplmaker.PLS \-n edit::seqret
\&             \-l http://corba.ebi.ac.uk/IOR/Analyses.ref
\&             \-a corba
\&
\&  # generate modules for all available analyses
\&  # (using default location and default access method)
\&  papplmaker.PLS
\&
\&  # do not generate but see what would be generated
\&  papplmaker.PLS \-s
\&  papplmaker.PLS \-S
\&
\&  # generate module for analysis \*(Aqedit::seqret\*(Aq
\&  # but name it \*(AqMySeqret\*(Aq
\&  papplmaker.PLS \-n edit::seqret \-m MySeqret
\&
\&      # ...and use it
\&      use MySeqret;
\&      print new MySeqret\->sequence_direct_data (\*(Aqtatatacccgt\*(Aq)
\&                        \->osformat (\*(Aqembl\*(Aq)
\&                        \->wait_for
\&                        \->outseq;
\&
\&  # ditto but put the result into directory \*(Aq/tmp/my\*(Aq
\&  # (directories do not need to exist)
\&  papplmaker.PLS \-n edit::seqret \-m MySeqret \-d /tmp/my/
\&
\&  # generate modules for all analysis whose names
\&  # matches given regular expression (case insensitive)
\&  papplmaker.PLS \-r \*(Aqedit\*(Aq
\&
\&  # ditto, but name generated module with your own names
\&  # (letting papplmaker.PLS substitute parts of your names)
\&  papplmaker.PLS \-r \*(Aqedit\*(Aq \-m \*(AqMy_$ANALYSIS\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module \f(CW\*(C`Bio::Tools::Run::Analysis\*(C'\fR provides access to the local and remote
analysis tools in a unified way (defined in \f(CW\*(C`Bio::AnalysisI\*(C'\fR). The
module uses general approach allowing to set arbitrary input data and
to retrieve results by naming them. However, sometimes is more
convenient to use a specific module, representing one analysis tool,
that already knows about available input and result names.
.PP
The generator \f(CW\*(C`papplmaker.PLS\*(C'\fR creates such dedicated modules.
.PP
\&\f(CW\*(C`papplmaker.PLS\*(C'\fR uses the same access method as the general module \-
which means that depending on the parameter \f(CW\*(C`access\*(C'\fR it can use \s-1SOAP\s0,
\&\s-1CORBA\s0 or any other (supported) protocol, or it can access local
analysis (available on the same machine where \f(CW\*(C`papplmaker.PLS\*(C'\fR is
invoked).
.PP
\&\f(CW\*(C`papplmaker.PLS\*(C'\fR does its job either for one named analysis (specified
by the \f(CW\*(C`\-n\*(C'\fR option, or it uses \f(CW\*(C`Bio::Tools::Run::AnalysisFactory\*(C'\fR module in
order to find what analyses are available, and can limit their number
by matching against a regular expression given by the \f(CW\*(C`\-r\*(C'\fR option.
.PP
The generated module or modules are named by default similarly to the
names of the corresponding analyses, but this can be changed by the
\&\f(CW\*(C`\-m\*(C'\fR option which is actually a template where the following strings
are recognised and replaced:
.ie n .IP "$ANALYSIS or ${\s-1ANALYSIS\s0}" 4
.el .IP "\f(CW$ANALYSIS\fR or ${\s-1ANALYSIS\s0}" 4
.IX Item "$ANALYSIS or ${ANALYSIS}"
Will be replaced by the name of the analysis.
.ie n .IP "$CATEGORY or ${\s-1CATEGORY\s0}" 4
.el .IP "\f(CW$CATEGORY\fR or ${\s-1CATEGORY\s0}" 4
.IX Item "$CATEGORY or ${CATEGORY}"
Will be replaced by the name of the category where the analysis belongs to.
.ie n .IP "$SERVICE or ${\s-1SERVICE\s0}" 4
.el .IP "\f(CW$SERVICE\fR or ${\s-1SERVICE\s0}" 4
.IX Item "$SERVICE or ${SERVICE}"
Will be replaced by the entire name of the service (which is usually a
concatenation of a category and a analysis name, and it is used also
as a default module name, btw).
.PP
What is a difference between the \f(CW\*(C`service\*(C'\fR and \f(CW\*(C`analysis\*(C'\fR, and what
does \f(CW\*(C`category\*(C'\fR mean? Sometimes these terms may be confusing because
they may mean slightly different things depending on the access method
used to communicate with them. Generally, an \f(CW\*(C`analysis\*(C'\fR is a program
(an application, a tool) running somewhere, but sometimes on a local
machine. An example of an analysis is \f(CW\*(C`seqret\*(C'\fR (from the \s-1EMBOSS\s0
package). The analyses can be grouped into categories by their
functions or by type of data they deal with (but sometimes there are
no categories at all). Each analyses can be accessed using a higher
level of abstraction, a \f(CW\*(C`service\*(C'\fR. A service is usually a
protocol-dependent wrapper, such as a Web Service, or a \s-1CORBA\s0
service. For example there is a \f(CW\*(C`edit::seqret\*(C'\fR service which
represents analysis \f(CW\*(C`seqret\*(C'\fR in the category \f(CW\*(C`edit\*(C'\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Senger (senger@ebi.ac.uk)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003, Martin Senger and EMBL-EBI.
All Rights Reserved.
.PP
This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
None known at the time of writing this.
